version: '3.9'
services:
  frontend-client:
    container_name: frontend-client
    build:
      context: ../frontend/client
      dockerfile: Dockerfile.frontend-client.local
    ports:
      - "${CLIENT_PORT}:${CLIENT_PORT}"
    command: >
      sh -c "yarn dev &
            yarn graphql-codegen"
    environment:
      PORT: ${CLIENT_PORT}
      HOST: ${CLIENT_HOST}
    env_file:
      - .env.local
    volumes:
      - ../frontend/client:/frontend
      - /frontend/node_modules
      - /frontend/.next
    networks:
      - web
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      backend-hasura-engine:
        condition: service_healthy

   backend-hasura-engine:
    container_name: backend-hasura-engine
    image: hasura/graphql-engine:${HASURA_VERSION}
    ports:
      - "${HASURA_PORT}:${HASURA_PORT}"
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - .env.local
    environment:
      HASURA_GRAPHQL_SERVER_PORT: ${HASURA_PORT}
      HASURA_GRAPHQL_DATABASE_URL: ${DATABASE_URL}
      HASURA_GRAPHQL_ENABLE_CONSOLE: "false"
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      HASURA_GRAPHQL_ENABLE_TELEMETRY: "false"
      HASURA_GRAPHQL_JWT_SECRET: '{"type": "HS256","key": "${JWT_SECRET}" }'
    networks:
      - web
      - db
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=web"
      - "traefik.http.routers.hasura-engine.rule=Host(`hasura-engine.${POSTGRES_DB}.test`)"
    tty: true
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "apt-get update -y && apt-get install -y curl && curl --fail http://localhost:${HASURA_PORT}/healthz || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 5
    extra_hosts:
      - "host.docker.internal:host-gateway"

  backend-hasura-console:
    container_name: backend-hasura-console
    build:
      context: ../backend/hasura-console
      dockerfile: Dockerfile.backend-hasura-console.local
    volumes:
      - ../backend/hasura-console:/usr/src/hasura
    environment:
      HASURA_GRAPHQL_DATABASE_URL: ${DATABASE_URL}
      HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_GRAPHQL_ADMIN_SECRET}
      HASURA_GRAPHQL_ADDRESS: 127.0.0.1
      HASURA_RUN_CONSOLE: "true"
      HASURA_PORT: ${HASURA_PORT}
      HASURA_CONSOLE_PORT: ${HASURA_CONSOLE_PORT}
    ports:
      - "${HASURA_CONSOLE_PORT}:${HASURA_CONSOLE_PORT}"
      - "9693:9693"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - web
      - db
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=web"
      - "traefik.http.services.hasura-console.loadbalancer.server.port=${HASURA_CONSOLE_PORT}"
      - "traefik.http.routers.hasura-console.rule=Host(`hasura-console.${POSTGRES_DB}.test`)"
    depends_on:
      backend-hasura-engine:
        condition: service_healthy
    restart: unless-stopped

  mailhog:
    container_name: mailhog
    image: mailhog/mailhog
    logging:
      driver: 'none' # disable saving logs
    ports:
      - "${EMAIL_SERVER_PORT}:${EMAIL_SERVER_PORT}" # smtp server
      - "${EMAIL_WEB_UI}:${EMAIL_WEB_UI}" # web ui
    networks:
      - web
    extra_hosts:
      - "host.docker.internal:host-gateway"
    env_file:
      - .env.local
    restart: on-failure

  db:
    container_name: db
    image: postgres:12
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_PASSWORD=${POSTGRES_PASS}
    volumes:
      - db_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    networks:
      - db
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 2s
      timeout: 2s
      retries: 10

  
volumes:
  db_data:

networks:
  web:
    driver: bridge
  db:
    driver: bridge
