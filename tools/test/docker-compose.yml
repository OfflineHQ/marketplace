# https://github.com/testjavascript/nodejs-integration-tests-best-practices#section-1-infrastructure-and-database-setup
version: '3.9'
services:
  hasura-engine-test:
    container_name: hasura_engine_test
    image: 'hasura/graphql-engine:v2.35.0.cli-migrations-v3'
    # command: 'graphql-engine --database-url $HASURA_GRAPHQL_DATABASE_URL serve --server-port $HASURA_GRAPHQL_SERVER_PORT'
    depends_on:
      test-db:
        condition: service_healthy
    env_file:
      - .env.test.jest
    environment:
      HASURA_GRAPHQL_DEV_MODE: 'true'
      HASURA_GRAPHQL_ENABLE_TELEMETRY: 'false'
      ## important ! here we use headers with encrypted json instead of cookie for testing purposes, we also use CustomHeader to avoid conflicts with both cookies
      HASURA_GRAPHQL_JWT_SECRETS: |
        [
          {
            "type": "HS256",
            "key": "ALjZVyWYniAX+6A86TilZ9oWJ4t8ZdCwDRrve1SwC/I=",
            "issuer": "https://dummy-fake-issuer.com",
            "header": {
              "type": "CustomHeader",
              "name": "marketplace-jwt"
            },
            "claims_map": {
              "x-hasura-allowed-roles": ["user", "anonymous"],
              "x-hasura-client-id": {
                "default": "",
                "path": "$.clientId"
              },
              "x-hasura-default-role": "user",
              "x-hasura-role": {
                "default": "",
                "path": "$.role"
              },
              "x-hasura-user-id": {
                "default": "",
                "path": "$.user.id"
              },
              "x-hasura-username": {
                "default": "",
                "path": "$.name"
              }
            }
          },
          {
            "type": "HS256",
            "key": "HGTRbJ6IaEoByH8KhA+BKV0Bgug+R7RSydnMbex2cZg=",
            "issuer": "https://dummy-fake-issuer-2.io",
            "header": {
              "type": "CustomHeader",
              "name": "back-office-jwt"
            },
            "claims_map": {
              "x-hasura-allowed-roles": [
                "user",
                "organizer_super_admin",
                "organizer_admin",
                "organizer_operations_manager",
                "organizer_finance_manager",
                "organizer_content_manager",
                "organizer_validator",
                "organizer_auditor",
                "organizer_guest",
                "organizer_human_resources"
              ],
              "x-hasura-client-id": {
                "default": "",
                "path": "$.clientId"
              },
              "x-hasura-default-role": "user",
              "x-hasura-role": {
                "default": "",
                "path": "$.user.role.role"
              },
              "x-hasura-organizer-id": {
                "default": "",
                "path": "$.user.role.organizerId"
              },
              "x-hasura-event-id": {
                "path": "$.user.role.eventId",
                "default": ""
              },
              "x-hasura-user-id": {
                "default": "",
                "path": "$.user.id"
              },
              "x-hasura-username": {
                "default": "",
                "path": "$.name"
              }
            }
          }
        ]
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'apt-get update -y && apt-get install -y curl && curl --fail http://localhost:9696/healthz || exit 1',
        ]
      interval: 5s
      timeout: 3s
      retries: 20
    ports:
      - '9696:9696'
      - '9691:9691'
    volumes:
      - ../../hasura/app/migrations:/hasura-migrations
      - ../../hasura/app/metadata:/hasura-metadata
    extra_hosts:
      - 'host.docker.internal:host-gateway'

  test-db:
    container_name: test_db
    image: postgres:16
    command: postgres -c fsync=off -c synchronous_commit=off -c full_page_writes=off -c random_page_cost=1.0 -c client_min_messages=NOTICE -p ${POSTGRES_PORT}
    env_file:
      - .env.test.jest
    ports:
      - '$POSTGRES_PORT:$POSTGRES_PORT'
    volumes:
      - test_db_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -p ${POSTGRES_PORT} -U ${POSTGRES_USER}']
      interval: 2s
      timeout: 2s
      retries: 10
    extra_hosts:
      - 'host.docker.internal:host-gateway'

  redis:
    image: redis
    command: redis-server --port 6380
    ports:
      - '6380:6380'

  serverless-redis-http:
    ports:
      - '7070:80'
    image: hiett/serverless-redis-http:latest
    environment:
      SRH_MODE: env
      SRH_TOKEN: example_token_test
      SRH_CONNECTION_STRING: 'redis://redis:6380'
    extra_hosts:
      - 'host.docker.internal:host-gateway'

volumes:
  test_db_data:
    driver_opts:
      type: tmpfs
      device: tmpfs
