schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """refresh the cache entry"""
  refresh: Boolean! = false

  """measured in seconds"""
  ttl: Int! = 60
) on QUERY

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

type JwtToken {
  jwt: String!
}

type SignoutOutput {
  ok: Boolean!
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "users"
  """
  delete_users(
    """filter the rows which have to be deleted"""
    where: users_bool_exp!
  ): users_mutation_response

  """
  delete single row from the table: "users"
  """
  delete_users_by_pk(id: String!): users

  """
  insert data into the table: "passwords"
  """
  insert_passwords(
    """the rows to be inserted"""
    objects: [passwords_insert_input!]!

    """upsert condition"""
    on_conflict: passwords_on_conflict
  ): passwords_mutation_response

  """
  insert a single row into the table: "passwords"
  """
  insert_passwords_one(
    """the row to be inserted"""
    object: passwords_insert_input!

    """upsert condition"""
    on_conflict: passwords_on_conflict
  ): passwords
  signout: SignoutOutput

  """
  update data of the table: "users"
  """
  update_users(
    """sets the columns of the filtered rows to the given values"""
    _set: users_set_input

    """filter the rows which have to be updated"""
    where: users_bool_exp!
  ): users_mutation_response

  """
  update single row of the table: "users"
  """
  update_users_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: users_set_input
    pk_columns: users_pk_columns_input!
  ): users
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

"""
columns and relationships of "passwords"
"""
type passwords {
  attempts: Int!
  hash: String!
  iterations: Int!
  salt: String!
}

"""
order by aggregate values of table "passwords"
"""
input passwords_aggregate_order_by {
  avg: passwords_avg_order_by
  count: order_by
  max: passwords_max_order_by
  min: passwords_min_order_by
  stddev: passwords_stddev_order_by
  stddev_pop: passwords_stddev_pop_order_by
  stddev_samp: passwords_stddev_samp_order_by
  sum: passwords_sum_order_by
  var_pop: passwords_var_pop_order_by
  var_samp: passwords_var_samp_order_by
  variance: passwords_variance_order_by
}

"""
order by avg() on columns of table "passwords"
"""
input passwords_avg_order_by {
  attempts: order_by
  iterations: order_by
}

"""
Boolean expression to filter rows from the table "passwords". All fields are combined with a logical 'AND'.
"""
input passwords_bool_exp {
  _and: [passwords_bool_exp!]
  _not: passwords_bool_exp
  _or: [passwords_bool_exp!]
  attempts: Int_comparison_exp
  hash: String_comparison_exp
  iterations: Int_comparison_exp
  salt: String_comparison_exp
}

"""
unique or primary key constraints on table "passwords"
"""
enum passwords_constraint {
  """
  unique or primary key constraint on columns "hash"
  """
  passwords_pkey

  """
  unique or primary key constraint on columns "salt"
  """
  passwords_salt_key
}

"""
input type for inserting data into table "passwords"
"""
input passwords_insert_input {
  hash: String
  iterations: Int
  salt: String
}

"""
order by max() on columns of table "passwords"
"""
input passwords_max_order_by {
  attempts: order_by
  hash: order_by
  iterations: order_by
  salt: order_by
}

"""
order by min() on columns of table "passwords"
"""
input passwords_min_order_by {
  attempts: order_by
  hash: order_by
  iterations: order_by
  salt: order_by
}

"""
response of any mutation on the table "passwords"
"""
type passwords_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [passwords!]!
}

"""
on_conflict condition type for table "passwords"
"""
input passwords_on_conflict {
  constraint: passwords_constraint!
  update_columns: [passwords_update_column!]! = []
  where: passwords_bool_exp
}

"""Ordering options when selecting data from "passwords"."""
input passwords_order_by {
  attempts: order_by
  hash: order_by
  iterations: order_by
  salt: order_by
}

"""
select columns of table "passwords"
"""
enum passwords_select_column {
  """column name"""
  attempts

  """column name"""
  hash

  """column name"""
  iterations

  """column name"""
  salt
}

"""
order by stddev() on columns of table "passwords"
"""
input passwords_stddev_order_by {
  attempts: order_by
  iterations: order_by
}

"""
order by stddev_pop() on columns of table "passwords"
"""
input passwords_stddev_pop_order_by {
  attempts: order_by
  iterations: order_by
}

"""
order by stddev_samp() on columns of table "passwords"
"""
input passwords_stddev_samp_order_by {
  attempts: order_by
  iterations: order_by
}

"""
order by sum() on columns of table "passwords"
"""
input passwords_sum_order_by {
  attempts: order_by
  iterations: order_by
}

"""
placeholder for update columns of table "passwords" (current role has no relevant permissions)
"""
enum passwords_update_column {
  """placeholder (do not use)"""
  _PLACEHOLDER
}

"""
order by var_pop() on columns of table "passwords"
"""
input passwords_var_pop_order_by {
  attempts: order_by
  iterations: order_by
}

"""
order by var_samp() on columns of table "passwords"
"""
input passwords_var_samp_order_by {
  attempts: order_by
  iterations: order_by
}

"""
order by variance() on columns of table "passwords"
"""
input passwords_variance_order_by {
  attempts: order_by
  iterations: order_by
}

type query_root {
  """An array relationship"""
  passwords(
    """distinct select on columns"""
    distinct_on: [passwords_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [passwords_order_by!]

    """filter the rows returned"""
    where: passwords_bool_exp
  ): [passwords!]!

  """fetch data from the table: "passwords" using primary key columns"""
  passwords_by_pk(hash: String!): passwords
  refreshJwtToken(fingerprintHash: String!, refreshToken: String!): JwtToken!

  """
  fetch data from the table: "users"
  """
  users(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): [users!]!

  """fetch data from the table: "users" using primary key columns"""
  users_by_pk(id: String!): users
}

type subscription_root {
  """An array relationship"""
  passwords(
    """distinct select on columns"""
    distinct_on: [passwords_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [passwords_order_by!]

    """filter the rows returned"""
    where: passwords_bool_exp
  ): [passwords!]!

  """fetch data from the table: "passwords" using primary key columns"""
  passwords_by_pk(hash: String!): passwords

  """
  fetch data from the table: "users"
  """
  users(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): [users!]!

  """fetch data from the table: "users" using primary key columns"""
  users_by_pk(id: String!): users
}

scalar timestamp

"""
Boolean expression to compare columns of type "timestamp". All fields are combined with logical 'AND'.
"""
input timestamp_comparison_exp {
  _eq: timestamp
  _gt: timestamp
  _gte: timestamp
  _in: [timestamp!]
  _is_null: Boolean
  _lt: timestamp
  _lte: timestamp
  _neq: timestamp
  _nin: [timestamp!]
}

"""
columns and relationships of "users"
"""
type users {
  email: String
  emailVerified: timestamp
  firstName: String
  id: String!
  image: String
  lastName: String
  name: String
  password: String

  """An array relationship"""
  passwords(
    """distinct select on columns"""
    distinct_on: [passwords_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [passwords_order_by!]

    """filter the rows returned"""
    where: passwords_bool_exp
  ): [passwords!]!
}

"""
Boolean expression to filter rows from the table "users". All fields are combined with a logical 'AND'.
"""
input users_bool_exp {
  _and: [users_bool_exp!]
  _not: users_bool_exp
  _or: [users_bool_exp!]
  email: String_comparison_exp
  emailVerified: timestamp_comparison_exp
  firstName: String_comparison_exp
  id: String_comparison_exp
  image: String_comparison_exp
  lastName: String_comparison_exp
  name: String_comparison_exp
  password: String_comparison_exp
  passwords: passwords_bool_exp
}

"""
response of any mutation on the table "users"
"""
type users_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [users!]!
}

"""Ordering options when selecting data from "users"."""
input users_order_by {
  email: order_by
  emailVerified: order_by
  firstName: order_by
  id: order_by
  image: order_by
  lastName: order_by
  name: order_by
  password: order_by
  passwords_aggregate: passwords_aggregate_order_by
}

"""primary key columns input for table: users"""
input users_pk_columns_input {
  id: String!
}

"""
select columns of table "users"
"""
enum users_select_column {
  """column name"""
  email

  """column name"""
  emailVerified

  """column name"""
  firstName

  """column name"""
  id

  """column name"""
  image

  """column name"""
  lastName

  """column name"""
  name

  """column name"""
  password
}

"""
input type for updating data in table "users"
"""
input users_set_input {
  email: String
  emailVerified: timestamp
  id: String
  image: String
  name: String
}