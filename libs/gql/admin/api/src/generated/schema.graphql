schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """refresh the cache entry"""
  refresh: Boolean! = false

  """measured in seconds"""
  ttl: Int! = 60
) on QUERY

type Aggregate {
  count: Int!
}

"""Asset system model"""
type Asset implements Node {
  """The time the document was created"""
  createdAt(
    """
    Variation of DateTime field to return, allows value from base document, current localization, or combined by returning the newer value of both
    """
    variation: SystemDateTimeFieldVariation! = COMBINED
  ): DateTime!

  """User that created this document"""
  createdBy(
    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `createdBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `createdBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
  ): User

  """Get the document in other stages"""
  documentInStages(
    """Decides if the current stage should be included or not"""
    includeCurrent: Boolean! = false

    """
    Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree
    """
    inheritLocale: Boolean! = false

    """Potential stages that should be returned"""
    stages: [Stage!]! = [DRAFT, PUBLISHED]
  ): [Asset!]!

  """The file name"""
  fileName: String!

  """The file handle"""
  handle: String!

  """The height of the file"""
  height: Float
  heroImageEvent(
    after: String
    before: String
    first: Int

    """
    Sets the locale of the parent document as the first locale in the fallback locales in the query's subtree.
    
    Note that `heroImageEvent` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, localized entries that do not have the provided locale defined will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
    last: Int

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `heroImageEvent` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, localized entries that do not have the provided locale defined will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
    orderBy: EventOrderByInput
    skip: Int
    where: EventWhereInput
  ): [Event!]!

  """List of Asset versions"""
  history(
    limit: Int! = 10
    skip: Int! = 0

    """
    This is optional and can be used to fetch the document version history for a specific stage instead of the current one
    """
    stageOverride: Stage
  ): [Version!]!

  """The unique identifier"""
  id: ID!
  imageOrganizer(
    after: String
    before: String
    first: Int

    """
    Sets the locale of the parent document as the first locale in the fallback locales in the query's subtree.
    
    Note that `imageOrganizer` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, localized entries that do not have the provided locale defined will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
    last: Int

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `imageOrganizer` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, localized entries that do not have the provided locale defined will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
    orderBy: OrganizerOrderByInput
    skip: Int
    where: OrganizerWhereInput
  ): [Organizer!]!

  """System Locale field"""
  locale: Locale!

  """Get the other localizations for this document"""
  localizations(
    """Decides if the current locale should be included or not"""
    includeCurrent: Boolean! = false

    """
    Potential locales that should be returned. 
    
    The order of locales will also override locale fall-backing behaviour in the query's subtree.
    
    Note any related model with localized fields in the query's subtree will be affected.
    The first locale matching the provided list will be returned, localized entries that do not have the provided locale defined will be filtered out.
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    
    Consider using this in conjunction with forceParentLocale on the children relation fields.
    """
    locales: [Locale!]! = [en, fr]
  ): [Asset!]!

  """The mime type of the file"""
  mimeType: String

  """The time the document was published. Null on documents in draft stage."""
  publishedAt(
    """
    Variation of DateTime field to return, allows value from base document, current localization, or combined by returning the newer value of both
    """
    variation: SystemDateTimeFieldVariation! = COMBINED
  ): DateTime

  """User that last published this document"""
  publishedBy(
    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `publishedBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `publishedBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
  ): User
  scheduledIn(
    after: String
    before: String
    first: Int

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `scheduledIn` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
    last: Int

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `scheduledIn` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
    skip: Int
    where: ScheduledOperationWhereInput
  ): [ScheduledOperation!]!

  """The file size"""
  size: Float

  """System stage field"""
  stage: Stage!

  """The time the document was updated"""
  updatedAt(
    """
    Variation of DateTime field to return, allows value from base document, current localization, or combined by returning the newer value of both
    """
    variation: SystemDateTimeFieldVariation! = COMBINED
  ): DateTime!

  """User that last updated this document"""
  updatedBy(
    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `updatedBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `updatedBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
  ): User

  """Get the url for the asset with provided transformations applied."""
  url(transformation: AssetTransformationInput): String!

  """The file width"""
  width: Float
}

"""A connection to a list of items."""
type AssetConnection {
  aggregate: Aggregate!

  """A list of edges."""
  edges: [AssetEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

input AssetCreateInput {
  createdAt: DateTime
  fileName: String!
  handle: String!
  height: Float
  heroImageEvent: EventCreateManyInlineInput
  imageOrganizer: OrganizerCreateManyInlineInput

  """
  Inline mutations for managing document localizations excluding the default locale
  """
  localizations: AssetCreateLocalizationsInput
  mimeType: String
  size: Float
  updatedAt: DateTime
  width: Float
}

input AssetCreateLocalizationDataInput {
  createdAt: DateTime
  fileName: String!
  handle: String!
  height: Float
  mimeType: String
  size: Float
  updatedAt: DateTime
  width: Float
}

input AssetCreateLocalizationInput {
  """Localization input"""
  data: AssetCreateLocalizationDataInput!
  locale: Locale!
}

input AssetCreateLocalizationsInput {
  """Create localizations for the newly-created document"""
  create: [AssetCreateLocalizationInput!]
}

input AssetCreateOneInlineInput {
  """Connect one existing Asset document"""
  connect: AssetWhereUniqueInput

  """Create and connect one Asset document"""
  create: AssetCreateInput
}

"""An edge in a connection."""
type AssetEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Asset!
}

"""Identifies documents"""
input AssetManyWhereInput {
  """Logical AND on all given filters."""
  AND: [AssetWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AssetWhereInput!]

  """Logical OR on all given filters."""
  OR: [AssetWhereInput!]

  """Contains search across all appropriate fields."""
  _search: String
  createdAt: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  createdAt_not: DateTime

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime]
  createdBy: UserWhereInput
  documentInStages_every: AssetWhereStageInput
  documentInStages_none: AssetWhereStageInput
  documentInStages_some: AssetWhereStageInput
  heroImageEvent_every: EventWhereInput
  heroImageEvent_none: EventWhereInput
  heroImageEvent_some: EventWhereInput
  id: ID

  """All values containing the given string."""
  id_contains: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values that are contained in given list."""
  id_in: [ID]

  """Any other value that exists and is not equal to the given value."""
  id_not: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID

  """All values that are not contained in given list."""
  id_not_in: [ID]

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values starting with the given string."""
  id_starts_with: ID
  imageOrganizer_every: OrganizerWhereInput
  imageOrganizer_none: OrganizerWhereInput
  imageOrganizer_some: OrganizerWhereInput
  publishedAt: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  publishedAt_not: DateTime

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime]
  publishedBy: UserWhereInput
  scheduledIn_every: ScheduledOperationWhereInput
  scheduledIn_none: ScheduledOperationWhereInput
  scheduledIn_some: ScheduledOperationWhereInput
  updatedAt: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  updatedAt_not: DateTime

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime]
  updatedBy: UserWhereInput
}

enum AssetOrderByInput {
  createdAt_ASC
  createdAt_DESC
  fileName_ASC
  fileName_DESC
  handle_ASC
  handle_DESC
  height_ASC
  height_DESC
  id_ASC
  id_DESC
  mimeType_ASC
  mimeType_DESC
  publishedAt_ASC
  publishedAt_DESC
  size_ASC
  size_DESC
  updatedAt_ASC
  updatedAt_DESC
  width_ASC
  width_DESC
}

"""Transformations for Assets"""
input AssetTransformationInput {
  document: DocumentTransformationInput
  image: ImageTransformationInput

  """Pass true if you want to validate the passed transformation parameters"""
  validateOptions: Boolean = false
}

input AssetUpdateInput {
  fileName: String
  handle: String
  height: Float
  heroImageEvent: EventUpdateManyInlineInput
  imageOrganizer: OrganizerUpdateManyInlineInput

  """Manage document localizations"""
  localizations: AssetUpdateLocalizationsInput
  mimeType: String
  size: Float
  width: Float
}

input AssetUpdateLocalizationDataInput {
  fileName: String
  handle: String
  height: Float
  mimeType: String
  size: Float
  width: Float
}

input AssetUpdateLocalizationInput {
  data: AssetUpdateLocalizationDataInput!
  locale: Locale!
}

input AssetUpdateLocalizationsInput {
  """Localizations to create"""
  create: [AssetCreateLocalizationInput!]

  """Localizations to delete"""
  delete: [Locale!]

  """Localizations to update"""
  update: [AssetUpdateLocalizationInput!]
  upsert: [AssetUpsertLocalizationInput!]
}

input AssetUpdateManyInput {
  fileName: String
  height: Float

  """Optional updates to localizations"""
  localizations: AssetUpdateManyLocalizationsInput
  mimeType: String
  size: Float
  width: Float
}

input AssetUpdateManyLocalizationDataInput {
  fileName: String
  height: Float
  mimeType: String
  size: Float
  width: Float
}

input AssetUpdateManyLocalizationInput {
  data: AssetUpdateManyLocalizationDataInput!
  locale: Locale!
}

input AssetUpdateManyLocalizationsInput {
  """Localizations to update"""
  update: [AssetUpdateManyLocalizationInput!]
}

input AssetUpdateOneInlineInput {
  """Connect existing Asset document"""
  connect: AssetWhereUniqueInput

  """Create and connect one Asset document"""
  create: AssetCreateInput

  """Delete currently connected Asset document"""
  delete: Boolean

  """Disconnect currently connected Asset document"""
  disconnect: Boolean

  """Update single Asset document"""
  update: AssetUpdateWithNestedWhereUniqueInput

  """Upsert single Asset document"""
  upsert: AssetUpsertWithNestedWhereUniqueInput
}

input AssetUpdateWithNestedWhereUniqueInput {
  """Document to update"""
  data: AssetUpdateInput!

  """Unique document search"""
  where: AssetWhereUniqueInput!
}

input AssetUpsertInput {
  """Create document if it didn't exist"""
  create: AssetCreateInput!

  """Update document if it exists"""
  update: AssetUpdateInput!
}

input AssetUpsertLocalizationInput {
  create: AssetCreateLocalizationDataInput!
  locale: Locale!
  update: AssetUpdateLocalizationDataInput!
}

input AssetUpsertWithNestedWhereUniqueInput {
  """Upsert data"""
  data: AssetUpsertInput!

  """Unique document search"""
  where: AssetWhereUniqueInput!
}

"""
This contains a set of filters that can be used to compare values internally
"""
input AssetWhereComparatorInput {
  """
  This field can be used to request to check if the entry is outdated by internal comparison
  """
  outdated_to: Boolean
}

"""Identifies documents"""
input AssetWhereInput {
  """Logical AND on all given filters."""
  AND: [AssetWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AssetWhereInput!]

  """Logical OR on all given filters."""
  OR: [AssetWhereInput!]

  """Contains search across all appropriate fields."""
  _search: String
  createdAt: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  createdAt_not: DateTime

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime]
  createdBy: UserWhereInput
  documentInStages_every: AssetWhereStageInput
  documentInStages_none: AssetWhereStageInput
  documentInStages_some: AssetWhereStageInput
  fileName: String

  """All values containing the given string."""
  fileName_contains: String

  """All values ending with the given string."""
  fileName_ends_with: String

  """All values that are contained in given list."""
  fileName_in: [String]

  """Any other value that exists and is not equal to the given value."""
  fileName_not: String

  """All values not containing the given string."""
  fileName_not_contains: String

  """All values not ending with the given string"""
  fileName_not_ends_with: String

  """All values that are not contained in given list."""
  fileName_not_in: [String]

  """All values not starting with the given string."""
  fileName_not_starts_with: String

  """All values starting with the given string."""
  fileName_starts_with: String
  handle: String

  """All values containing the given string."""
  handle_contains: String

  """All values ending with the given string."""
  handle_ends_with: String

  """All values that are contained in given list."""
  handle_in: [String]

  """Any other value that exists and is not equal to the given value."""
  handle_not: String

  """All values not containing the given string."""
  handle_not_contains: String

  """All values not ending with the given string"""
  handle_not_ends_with: String

  """All values that are not contained in given list."""
  handle_not_in: [String]

  """All values not starting with the given string."""
  handle_not_starts_with: String

  """All values starting with the given string."""
  handle_starts_with: String
  height: Float

  """All values greater than the given value."""
  height_gt: Float

  """All values greater than or equal the given value."""
  height_gte: Float

  """All values that are contained in given list."""
  height_in: [Float]

  """All values less than the given value."""
  height_lt: Float

  """All values less than or equal the given value."""
  height_lte: Float

  """Any other value that exists and is not equal to the given value."""
  height_not: Float

  """All values that are not contained in given list."""
  height_not_in: [Float]
  heroImageEvent_every: EventWhereInput
  heroImageEvent_none: EventWhereInput
  heroImageEvent_some: EventWhereInput
  id: ID

  """All values containing the given string."""
  id_contains: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values that are contained in given list."""
  id_in: [ID]

  """Any other value that exists and is not equal to the given value."""
  id_not: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID

  """All values that are not contained in given list."""
  id_not_in: [ID]

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values starting with the given string."""
  id_starts_with: ID
  imageOrganizer_every: OrganizerWhereInput
  imageOrganizer_none: OrganizerWhereInput
  imageOrganizer_some: OrganizerWhereInput
  mimeType: String

  """All values containing the given string."""
  mimeType_contains: String

  """All values ending with the given string."""
  mimeType_ends_with: String

  """All values that are contained in given list."""
  mimeType_in: [String]

  """Any other value that exists and is not equal to the given value."""
  mimeType_not: String

  """All values not containing the given string."""
  mimeType_not_contains: String

  """All values not ending with the given string"""
  mimeType_not_ends_with: String

  """All values that are not contained in given list."""
  mimeType_not_in: [String]

  """All values not starting with the given string."""
  mimeType_not_starts_with: String

  """All values starting with the given string."""
  mimeType_starts_with: String
  publishedAt: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  publishedAt_not: DateTime

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime]
  publishedBy: UserWhereInput
  scheduledIn_every: ScheduledOperationWhereInput
  scheduledIn_none: ScheduledOperationWhereInput
  scheduledIn_some: ScheduledOperationWhereInput
  size: Float

  """All values greater than the given value."""
  size_gt: Float

  """All values greater than or equal the given value."""
  size_gte: Float

  """All values that are contained in given list."""
  size_in: [Float]

  """All values less than the given value."""
  size_lt: Float

  """All values less than or equal the given value."""
  size_lte: Float

  """Any other value that exists and is not equal to the given value."""
  size_not: Float

  """All values that are not contained in given list."""
  size_not_in: [Float]
  updatedAt: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  updatedAt_not: DateTime

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime]
  updatedBy: UserWhereInput
  width: Float

  """All values greater than the given value."""
  width_gt: Float

  """All values greater than or equal the given value."""
  width_gte: Float

  """All values that are contained in given list."""
  width_in: [Float]

  """All values less than the given value."""
  width_lt: Float

  """All values less than or equal the given value."""
  width_lte: Float

  """Any other value that exists and is not equal to the given value."""
  width_not: Float

  """All values that are not contained in given list."""
  width_not_in: [Float]
}

"""
The document in stages filter allows specifying a stage entry to cross compare the same document between different stages
"""
input AssetWhereStageInput {
  """Logical AND on all given filters."""
  AND: [AssetWhereStageInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AssetWhereStageInput!]

  """Logical OR on all given filters."""
  OR: [AssetWhereStageInput!]

  """
  This field contains fields which can be set as true or false to specify an internal comparison
  """
  compareWithParent: AssetWhereComparatorInput

  """Specify the stage to compare with"""
  stage: Stage
}

"""References Asset record uniquely"""
input AssetWhereUniqueInput {
  id: ID
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

input ConnectPositionInput {
  """Connect document after specified document"""
  after: ID

  """Connect document before specified document"""
  before: ID

  """Connect document at last position"""
  end: Boolean

  """Connect document at first position"""
  start: Boolean
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the date-timeformat outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representationof dates and times using the Gregorian calendar.
"""
scalar DateTime

enum DocumentFileTypes {
  doc
  docx
  html
  jpg
  odp
  ods
  odt
  pdf
  png
  ppt
  pptx
  svg
  txt
  webp
  xls
  xlsx
}

input DocumentOutputInput {
  """
  Transforms a document into a desired file type.
  See this matrix for format support:
  
  PDF:	jpg, odp, ods, odt, png, svg, txt, and webp
  DOC:	docx, html, jpg, odt, pdf, png, svg, txt, and webp
  DOCX:	doc, html, jpg, odt, pdf, png, svg, txt, and webp
  ODT:	doc, docx, html, jpg, pdf, png, svg, txt, and webp
  XLS:	jpg, pdf, ods, png, svg, xlsx, and webp
  XLSX:	jpg, pdf, ods, png, svg, xls, and webp
  ODS:	jpg, pdf, png, xls, svg, xlsx, and webp
  PPT:	jpg, odp, pdf, png, svg, pptx, and webp
  PPTX:	jpg, odp, pdf, png, svg, ppt, and webp
  ODP:	jpg, pdf, png, ppt, svg, pptx, and webp
  BMP:	jpg, odp, ods, odt, pdf, png, svg, and webp
  GIF:	jpg, odp, ods, odt, pdf, png, svg, and webp
  JPG:	jpg, odp, ods, odt, pdf, png, svg, and webp
  PNG:	jpg, odp, ods, odt, pdf, png, svg, and webp
  WEBP:	jpg, odp, ods, odt, pdf, png, svg, and webp
  TIFF:	jpg, odp, ods, odt, pdf, png, svg, and webp
  AI:	    jpg, odp, ods, odt, pdf, png, svg, and webp
  PSD:	jpg, odp, ods, odt, pdf, png, svg, and webp
  SVG:	jpg, odp, ods, odt, pdf, png, and webp
  HTML:	jpg, odt, pdf, svg, txt, and webp
  TXT:	jpg, html, odt, pdf, svg, and webp
  """
  format: DocumentFileTypes
}

"""Transformations for Documents"""
input DocumentTransformationInput {
  """Changes the output for the file."""
  output: DocumentOutputInput
}

type DocumentVersion {
  createdAt: DateTime!
  data: Json
  id: ID!
  revision: Int!
  stage: Stage!
}

"""Root event model"""
type Event implements Node {
  """The time the document was created"""
  createdAt(
    """
    Variation of DateTime field to return, allows value from base document, current localization, or combined by returning the newer value of both
    """
    variation: SystemDateTimeFieldVariation! = COMBINED
  ): DateTime!

  """User that created this document"""
  createdBy(
    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `createdBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `createdBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
  ): User
  description: EventDescriptionRichText!

  """Get the document in other stages"""
  documentInStages(
    """Decides if the current stage should be included or not"""
    includeCurrent: Boolean! = false

    """
    Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree
    """
    inheritLocale: Boolean! = false

    """Potential stages that should be returned"""
    stages: [Stage!]! = [DRAFT, PUBLISHED]
  ): [Event!]!

  """
  Define the different locations and timeframe for your event.
  This is only for information purpose but it should match your 'Event Pass' locations and dates
  """
  eventDateLocations(
    after: String
    before: String
    first: Int

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `eventDateLocations` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
    last: Int

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `eventDateLocations` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
    orderBy: EventDateLocationOrderByInput
    skip: Int
    where: EventDateLocationWhereInput
  ): [EventDateLocation!]!
  eventPasses(
    after: String
    before: String
    first: Int

    """
    Sets the locale of the parent document as the first locale in the fallback locales in the query's subtree.
    
    Note that `eventPasses` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, localized entries that do not have the provided locale defined will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
    last: Int

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `eventPasses` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, localized entries that do not have the provided locale defined will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
    orderBy: EventPassOrderByInput
    skip: Int
    where: EventPassWhereInput
  ): [EventPass!]!
  heroImage(
    """
    Sets the locale of the parent document as the first locale in the fallback locales in the query's subtree.
    
    Note that `heroImage` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, localized entries that do not have the provided locale defined will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `heroImage` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, localized entries that do not have the provided locale defined will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
  ): Asset!

  """List of Event versions"""
  history(
    limit: Int! = 10
    skip: Int! = 0

    """
    This is optional and can be used to fetch the document version history for a specific stage instead of the current one
    """
    stageOverride: Stage
  ): [Version!]!

  """The unique identifier"""
  id: ID!

  """System Locale field"""
  locale: Locale!

  """Get the other localizations for this document"""
  localizations(
    """Decides if the current locale should be included or not"""
    includeCurrent: Boolean! = false

    """
    Potential locales that should be returned. 
    
    The order of locales will also override locale fall-backing behaviour in the query's subtree.
    
    Note any related model with localized fields in the query's subtree will be affected.
    The first locale matching the provided list will be returned, localized entries that do not have the provided locale defined will be filtered out.
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    
    Consider using this in conjunction with forceParentLocale on the children relation fields.
    """
    locales: [Locale!]! = [en, fr]
  ): [Event!]!

  """The address of the NFT collection of the Event"""
  nftCollectionAddress: String!
  organizer(
    """
    Sets the locale of the parent document as the first locale in the fallback locales in the query's subtree.
    
    Note that `organizer` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, localized entries that do not have the provided locale defined will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `organizer` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, localized entries that do not have the provided locale defined will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
  ): Organizer

  """
  Whether the event is public (visible to anyone) or private (for instance visible only to owner of specific NFTs)
  """
  public: Boolean

  """Whether the event is published or not (visible only to organizers)"""
  published: Boolean!

  """The time the document was published. Null on documents in draft stage."""
  publishedAt(
    """
    Variation of DateTime field to return, allows value from base document, current localization, or combined by returning the newer value of both
    """
    variation: SystemDateTimeFieldVariation! = COMBINED
  ): DateTime

  """User that last published this document"""
  publishedBy(
    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `publishedBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `publishedBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
  ): User
  scheduledIn(
    after: String
    before: String
    first: Int

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `scheduledIn` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
    last: Int

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `scheduledIn` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
    skip: Int
    where: ScheduledOperationWhereInput
  ): [ScheduledOperation!]!

  """Used in the URL"""
  slug: String!

  """System stage field"""
  stage: Stage!
  title: String!

  """The time the document was updated"""
  updatedAt(
    """
    Variation of DateTime field to return, allows value from base document, current localization, or combined by returning the newer value of both
    """
    variation: SystemDateTimeFieldVariation! = COMBINED
  ): DateTime!

  """User that last updated this document"""
  updatedBy(
    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `updatedBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `updatedBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
  ): User
}

input EventConnectInput {
  """
  Allow to specify document position in list of connected documents, will default to appending at end of list
  """
  position: ConnectPositionInput

  """Document to connect"""
  where: EventWhereUniqueInput!
}

"""A connection to a list of items."""
type EventConnection {
  aggregate: Aggregate!

  """A list of edges."""
  edges: [EventEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

input EventCreateInput {
  createdAt: DateTime

  """description input for default locale (en)"""
  description: RichTextAST!
  eventDateLocations: EventDateLocationCreateManyInlineInput
  eventPasses: EventPassCreateManyInlineInput
  heroImage: AssetCreateOneInlineInput!

  """
  Inline mutations for managing document localizations excluding the default locale
  """
  localizations: EventCreateLocalizationsInput
  nftCollectionAddress: String!
  organizer: OrganizerCreateOneInlineInput
  public: Boolean
  published: Boolean!
  slug: String!

  """title input for default locale (en)"""
  title: String!
  updatedAt: DateTime
}

input EventCreateLocalizationDataInput {
  createdAt: DateTime
  description: RichTextAST!
  title: String!
  updatedAt: DateTime
}

input EventCreateLocalizationInput {
  """Localization input"""
  data: EventCreateLocalizationDataInput!
  locale: Locale!
}

input EventCreateLocalizationsInput {
  """Create localizations for the newly-created document"""
  create: [EventCreateLocalizationInput!]
}

input EventCreateManyInlineInput {
  """Connect multiple existing Event documents"""
  connect: [EventWhereUniqueInput!]

  """Create and connect multiple existing Event documents"""
  create: [EventCreateInput!]
}

input EventCreateOneInlineInput {
  """Connect one existing Event document"""
  connect: EventWhereUniqueInput

  """Create and connect one Event document"""
  create: EventCreateInput
}

"""
Model used to define the different locations and dates of an event. A festival or a tournament for instance could have several.
"""
type EventDateLocation {
  """The end date including time on the UTC timezone."""
  dateEnd: DateTime!

  """The start date including time on the UTC timezone."""
  dateStart: DateTime!

  """The unique identifier"""
  id: ID!

  """The location expressed in coordinates on a map and address"""
  locationAddress(
    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `locationAddress` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `locationAddress` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
  ): LocationAddress!

  """System stage field"""
  stage: Stage!
}

input EventDateLocationCreateInput {
  dateEnd: DateTime!
  dateStart: DateTime!
  locationAddress: LocationAddressCreateOneInlineInput!
}

input EventDateLocationCreateManyInlineInput {
  """Create and connect multiple existing EventDateLocation documents"""
  create: [EventDateLocationCreateInput!]
}

input EventDateLocationCreateOneInlineInput {
  """Create and connect one EventDateLocation document"""
  create: EventDateLocationCreateInput
}

input EventDateLocationCreateWithPositionInput {
  """Document to create"""
  data: EventDateLocationCreateInput!

  """
  Position in the list of existing component instances, will default to appending at the end of list
  """
  position: ConnectPositionInput
}

enum EventDateLocationOrderByInput {
  dateEnd_ASC
  dateEnd_DESC
  dateStart_ASC
  dateStart_DESC
  id_ASC
  id_DESC
}

input EventDateLocationUpdateInput {
  dateEnd: DateTime
  dateStart: DateTime
  locationAddress: LocationAddressUpdateOneInlineInput
}

input EventDateLocationUpdateManyInlineInput {
  """Create and connect multiple EventDateLocation component instances"""
  create: [EventDateLocationCreateWithPositionInput!]

  """Delete multiple EventDateLocation documents"""
  delete: [EventDateLocationWhereUniqueInput!]

  """Update multiple EventDateLocation component instances"""
  update: [EventDateLocationUpdateWithNestedWhereUniqueAndPositionInput!]

  """Upsert multiple EventDateLocation component instances"""
  upsert: [EventDateLocationUpsertWithNestedWhereUniqueAndPositionInput!]
}

input EventDateLocationUpdateOneInlineInput {
  """Create and connect one EventDateLocation document"""
  create: EventDateLocationCreateInput

  """Delete currently connected EventDateLocation document"""
  delete: Boolean

  """Update single EventDateLocation document"""
  update: EventDateLocationUpdateWithNestedWhereUniqueInput

  """Upsert single EventDateLocation document"""
  upsert: EventDateLocationUpsertWithNestedWhereUniqueInput
}

input EventDateLocationUpdateWithNestedWhereUniqueAndPositionInput {
  """Document to update"""
  data: EventDateLocationUpdateInput

  """
  Position in the list of existing component instances, will default to appending at the end of list
  """
  position: ConnectPositionInput

  """Unique component instance search"""
  where: EventDateLocationWhereUniqueInput!
}

input EventDateLocationUpdateWithNestedWhereUniqueInput {
  """Document to update"""
  data: EventDateLocationUpdateInput!

  """Unique document search"""
  where: EventDateLocationWhereUniqueInput!
}

input EventDateLocationUpsertInput {
  """Create document if it didn't exist"""
  create: EventDateLocationCreateInput!

  """Update document if it exists"""
  update: EventDateLocationUpdateInput!
}

input EventDateLocationUpsertWithNestedWhereUniqueAndPositionInput {
  """Document to upsert"""
  data: EventDateLocationUpsertInput

  """
  Position in the list of existing component instances, will default to appending at the end of list
  """
  position: ConnectPositionInput

  """Unique component instance search"""
  where: EventDateLocationWhereUniqueInput!
}

input EventDateLocationUpsertWithNestedWhereUniqueInput {
  """Upsert data"""
  data: EventDateLocationUpsertInput!

  """Unique document search"""
  where: EventDateLocationWhereUniqueInput!
}

"""Identifies documents"""
input EventDateLocationWhereInput {
  """Logical AND on all given filters."""
  AND: [EventDateLocationWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EventDateLocationWhereInput!]

  """Logical OR on all given filters."""
  OR: [EventDateLocationWhereInput!]

  """Contains search across all appropriate fields."""
  _search: String
  dateEnd: DateTime

  """All values greater than the given value."""
  dateEnd_gt: DateTime

  """All values greater than or equal the given value."""
  dateEnd_gte: DateTime

  """All values that are contained in given list."""
  dateEnd_in: [DateTime]

  """All values less than the given value."""
  dateEnd_lt: DateTime

  """All values less than or equal the given value."""
  dateEnd_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  dateEnd_not: DateTime

  """All values that are not contained in given list."""
  dateEnd_not_in: [DateTime]
  dateStart: DateTime

  """All values greater than the given value."""
  dateStart_gt: DateTime

  """All values greater than or equal the given value."""
  dateStart_gte: DateTime

  """All values that are contained in given list."""
  dateStart_in: [DateTime]

  """All values less than the given value."""
  dateStart_lt: DateTime

  """All values less than or equal the given value."""
  dateStart_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  dateStart_not: DateTime

  """All values that are not contained in given list."""
  dateStart_not_in: [DateTime]
  id: ID

  """All values containing the given string."""
  id_contains: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values that are contained in given list."""
  id_in: [ID]

  """Any other value that exists and is not equal to the given value."""
  id_not: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID

  """All values that are not contained in given list."""
  id_not_in: [ID]

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values starting with the given string."""
  id_starts_with: ID
  locationAddress: LocationAddressWhereInput
}

"""References EventDateLocation record uniquely"""
input EventDateLocationWhereUniqueInput {
  id: ID
}

type EventDescriptionRichText {
  """Returns HTMl representation"""
  html: String!
  json: RichTextAST!

  """Returns Markdown representation"""
  markdown: String!
  raw: RichTextAST!
  references(after: String, before: String, first: Int, last: Int, skip: Int): [EventDescriptionRichTextEmbeddedTypes!]!

  """Returns plain-text contents of RichText"""
  text: String!
}

union EventDescriptionRichTextEmbeddedTypes = Asset

"""An edge in a connection."""
type EventEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Event!
}

"""Identifies documents"""
input EventManyWhereInput {
  """Logical AND on all given filters."""
  AND: [EventWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EventWhereInput!]

  """Logical OR on all given filters."""
  OR: [EventWhereInput!]

  """Contains search across all appropriate fields."""
  _search: String
  createdAt: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  createdAt_not: DateTime

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime]
  createdBy: UserWhereInput
  documentInStages_every: EventWhereStageInput
  documentInStages_none: EventWhereStageInput
  documentInStages_some: EventWhereStageInput
  eventDateLocations_every: EventDateLocationWhereInput
  eventDateLocations_none: EventDateLocationWhereInput
  eventDateLocations_some: EventDateLocationWhereInput
  eventPasses_every: EventPassWhereInput
  eventPasses_none: EventPassWhereInput
  eventPasses_some: EventPassWhereInput
  heroImage: AssetWhereInput
  id: ID

  """All values containing the given string."""
  id_contains: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values that are contained in given list."""
  id_in: [ID]

  """Any other value that exists and is not equal to the given value."""
  id_not: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID

  """All values that are not contained in given list."""
  id_not_in: [ID]

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values starting with the given string."""
  id_starts_with: ID
  nftCollectionAddress: String

  """All values containing the given string."""
  nftCollectionAddress_contains: String

  """All values ending with the given string."""
  nftCollectionAddress_ends_with: String

  """All values that are contained in given list."""
  nftCollectionAddress_in: [String]

  """Any other value that exists and is not equal to the given value."""
  nftCollectionAddress_not: String

  """All values not containing the given string."""
  nftCollectionAddress_not_contains: String

  """All values not ending with the given string"""
  nftCollectionAddress_not_ends_with: String

  """All values that are not contained in given list."""
  nftCollectionAddress_not_in: [String]

  """All values not starting with the given string."""
  nftCollectionAddress_not_starts_with: String

  """All values starting with the given string."""
  nftCollectionAddress_starts_with: String
  organizer: OrganizerWhereInput
  public: Boolean

  """Any other value that exists and is not equal to the given value."""
  public_not: Boolean
  published: Boolean
  publishedAt: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  publishedAt_not: DateTime

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime]
  publishedBy: UserWhereInput

  """Any other value that exists and is not equal to the given value."""
  published_not: Boolean
  scheduledIn_every: ScheduledOperationWhereInput
  scheduledIn_none: ScheduledOperationWhereInput
  scheduledIn_some: ScheduledOperationWhereInput
  slug: String

  """All values containing the given string."""
  slug_contains: String

  """All values ending with the given string."""
  slug_ends_with: String

  """All values that are contained in given list."""
  slug_in: [String]

  """Any other value that exists and is not equal to the given value."""
  slug_not: String

  """All values not containing the given string."""
  slug_not_contains: String

  """All values not ending with the given string"""
  slug_not_ends_with: String

  """All values that are not contained in given list."""
  slug_not_in: [String]

  """All values not starting with the given string."""
  slug_not_starts_with: String

  """All values starting with the given string."""
  slug_starts_with: String
  updatedAt: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  updatedAt_not: DateTime

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime]
  updatedBy: UserWhereInput
}

enum EventOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  nftCollectionAddress_ASC
  nftCollectionAddress_DESC
  public_ASC
  public_DESC
  publishedAt_ASC
  publishedAt_DESC
  published_ASC
  published_DESC
  slug_ASC
  slug_DESC
  title_ASC
  title_DESC
  updatedAt_ASC
  updatedAt_DESC
}

"""
Define a pass for an event with different options, price, number of passes etc.
"""
type EventPass implements Node {
  """The time the document was created"""
  createdAt(
    """
    Variation of DateTime field to return, allows value from base document, current localization, or combined by returning the newer value of both
    """
    variation: SystemDateTimeFieldVariation! = COMBINED
  ): DateTime!

  """User that created this document"""
  createdBy(
    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `createdBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `createdBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
  ): User

  """
  Description of the pass, like "Access to the event for 3 days"
  """
  description: String!

  """Get the document in other stages"""
  documentInStages(
    """Decides if the current stage should be included or not"""
    includeCurrent: Boolean! = false

    """
    Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree
    """
    inheritLocale: Boolean! = false

    """Potential stages that should be returned"""
    stages: [Stage!]! = [DRAFT, PUBLISHED]
  ): [EventPass!]!
  event(
    """
    Sets the locale of the parent document as the first locale in the fallback locales in the query's subtree.
    
    Note that `event` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, localized entries that do not have the provided locale defined will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `event` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, localized entries that do not have the provided locale defined will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
  ): Event
  eventPassOrderSums: eventPassOrderSums
  eventPassPricing: eventPassPricing

  """List of EventPass versions"""
  history(
    limit: Int! = 10
    skip: Int! = 0

    """
    This is optional and can be used to fetch the document version history for a specific stage instead of the current one
    """
    stageOverride: Stage
  ): [Version!]!

  """The unique identifier"""
  id: ID!

  """System Locale field"""
  locale: Locale!

  """Get the other localizations for this document"""
  localizations(
    """Decides if the current locale should be included or not"""
    includeCurrent: Boolean! = false

    """
    Potential locales that should be returned. 
    
    The order of locales will also override locale fall-backing behaviour in the query's subtree.
    
    Note any related model with localized fields in the query's subtree will be affected.
    The first locale matching the provided list will be returned, localized entries that do not have the provided locale defined will be filtered out.
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    
    Consider using this in conjunction with forceParentLocale on the children relation fields.
    """
    locales: [Locale!]! = [en, fr]
  ): [EventPass!]!

  """
  User-friendly name of the pass, like "VIP 3-Day Pass"
  """
  name: String!

  """
  Define the different pass options. An option is defined for a specific location and timeframe
  """
  passOptions(
    after: String
    before: String
    first: Int

    """
    Sets the locale of the parent document as the first locale in the fallback locales in the query's subtree.
    
    Note that `passOptions` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, localized entries that do not have the provided locale defined will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
    last: Int

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `passOptions` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, localized entries that do not have the provided locale defined will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
    orderBy: PassOptionOrderByInput
    skip: Int
    where: PassOptionWhereInput
  ): [PassOption!]!

  """The time the document was published. Null on documents in draft stage."""
  publishedAt(
    """
    Variation of DateTime field to return, allows value from base document, current localization, or combined by returning the newer value of both
    """
    variation: SystemDateTimeFieldVariation! = COMBINED
  ): DateTime

  """User that last published this document"""
  publishedBy(
    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `publishedBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `publishedBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
  ): User
  scheduledIn(
    after: String
    before: String
    first: Int

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `scheduledIn` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
    last: Int

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `scheduledIn` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
    skip: Int
    where: ScheduledOperationWhereInput
  ): [ScheduledOperation!]!

  """System stage field"""
  stage: Stage!

  """The time the document was updated"""
  updatedAt(
    """
    Variation of DateTime field to return, allows value from base document, current localization, or combined by returning the newer value of both
    """
    variation: SystemDateTimeFieldVariation! = COMBINED
  ): DateTime!

  """User that last updated this document"""
  updatedBy(
    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `updatedBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `updatedBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
  ): User
}

input EventPassConnectInput {
  """
  Allow to specify document position in list of connected documents, will default to appending at end of list
  """
  position: ConnectPositionInput

  """Document to connect"""
  where: EventPassWhereUniqueInput!
}

"""A connection to a list of items."""
type EventPassConnection {
  aggregate: Aggregate!

  """A list of edges."""
  edges: [EventPassEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

input EventPassCreateInput {
  createdAt: DateTime

  """description input for default locale (en)"""
  description: String!
  event: EventCreateOneInlineInput

  """
  Inline mutations for managing document localizations excluding the default locale
  """
  localizations: EventPassCreateLocalizationsInput

  """name input for default locale (en)"""
  name: String!
  passOptions: PassOptionCreateManyInlineInput
  updatedAt: DateTime
}

input EventPassCreateLocalizationDataInput {
  createdAt: DateTime
  description: String!
  name: String!
  updatedAt: DateTime
}

input EventPassCreateLocalizationInput {
  """Localization input"""
  data: EventPassCreateLocalizationDataInput!
  locale: Locale!
}

input EventPassCreateLocalizationsInput {
  """Create localizations for the newly-created document"""
  create: [EventPassCreateLocalizationInput!]
}

input EventPassCreateManyInlineInput {
  """Connect multiple existing EventPass documents"""
  connect: [EventPassWhereUniqueInput!]

  """Create and connect multiple existing EventPass documents"""
  create: [EventPassCreateInput!]
}

"""An edge in a connection."""
type EventPassEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: EventPass!
}

"""Identifies documents"""
input EventPassManyWhereInput {
  """Logical AND on all given filters."""
  AND: [EventPassWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EventPassWhereInput!]

  """Logical OR on all given filters."""
  OR: [EventPassWhereInput!]

  """Contains search across all appropriate fields."""
  _search: String
  createdAt: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  createdAt_not: DateTime

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime]
  createdBy: UserWhereInput
  documentInStages_every: EventPassWhereStageInput
  documentInStages_none: EventPassWhereStageInput
  documentInStages_some: EventPassWhereStageInput
  event: EventWhereInput
  id: ID

  """All values containing the given string."""
  id_contains: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values that are contained in given list."""
  id_in: [ID]

  """Any other value that exists and is not equal to the given value."""
  id_not: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID

  """All values that are not contained in given list."""
  id_not_in: [ID]

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values starting with the given string."""
  id_starts_with: ID
  passOptions_every: PassOptionWhereInput
  passOptions_none: PassOptionWhereInput
  passOptions_some: PassOptionWhereInput
  publishedAt: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  publishedAt_not: DateTime

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime]
  publishedBy: UserWhereInput
  scheduledIn_every: ScheduledOperationWhereInput
  scheduledIn_none: ScheduledOperationWhereInput
  scheduledIn_some: ScheduledOperationWhereInput
  updatedAt: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  updatedAt_not: DateTime

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime]
  updatedBy: UserWhereInput
}

enum EventPassOrderByInput {
  createdAt_ASC
  createdAt_DESC
  description_ASC
  description_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  publishedAt_ASC
  publishedAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input EventPassUpdateInput {
  """description input for default locale (en)"""
  description: String
  event: EventUpdateOneInlineInput

  """Manage document localizations"""
  localizations: EventPassUpdateLocalizationsInput

  """name input for default locale (en)"""
  name: String
  passOptions: PassOptionUpdateManyInlineInput
}

input EventPassUpdateLocalizationDataInput {
  description: String
  name: String
}

input EventPassUpdateLocalizationInput {
  data: EventPassUpdateLocalizationDataInput!
  locale: Locale!
}

input EventPassUpdateLocalizationsInput {
  """Localizations to create"""
  create: [EventPassCreateLocalizationInput!]

  """Localizations to delete"""
  delete: [Locale!]

  """Localizations to update"""
  update: [EventPassUpdateLocalizationInput!]
  upsert: [EventPassUpsertLocalizationInput!]
}

input EventPassUpdateManyInlineInput {
  """Connect multiple existing EventPass documents"""
  connect: [EventPassConnectInput!]

  """Create and connect multiple EventPass documents"""
  create: [EventPassCreateInput!]

  """Delete multiple EventPass documents"""
  delete: [EventPassWhereUniqueInput!]

  """Disconnect multiple EventPass documents"""
  disconnect: [EventPassWhereUniqueInput!]

  """
  Override currently-connected documents with multiple existing EventPass documents
  """
  set: [EventPassWhereUniqueInput!]

  """Update multiple EventPass documents"""
  update: [EventPassUpdateWithNestedWhereUniqueInput!]

  """Upsert multiple EventPass documents"""
  upsert: [EventPassUpsertWithNestedWhereUniqueInput!]
}

input EventPassUpdateManyInput {
  """description input for default locale (en)"""
  description: String

  """Optional updates to localizations"""
  localizations: EventPassUpdateManyLocalizationsInput

  """name input for default locale (en)"""
  name: String
}

input EventPassUpdateManyLocalizationDataInput {
  description: String
  name: String
}

input EventPassUpdateManyLocalizationInput {
  data: EventPassUpdateManyLocalizationDataInput!
  locale: Locale!
}

input EventPassUpdateManyLocalizationsInput {
  """Localizations to update"""
  update: [EventPassUpdateManyLocalizationInput!]
}

input EventPassUpdateWithNestedWhereUniqueInput {
  """Document to update"""
  data: EventPassUpdateInput!

  """Unique document search"""
  where: EventPassWhereUniqueInput!
}

input EventPassUpsertInput {
  """Create document if it didn't exist"""
  create: EventPassCreateInput!

  """Update document if it exists"""
  update: EventPassUpdateInput!
}

input EventPassUpsertLocalizationInput {
  create: EventPassCreateLocalizationDataInput!
  locale: Locale!
  update: EventPassUpdateLocalizationDataInput!
}

input EventPassUpsertWithNestedWhereUniqueInput {
  """Upsert data"""
  data: EventPassUpsertInput!

  """Unique document search"""
  where: EventPassWhereUniqueInput!
}

"""
This contains a set of filters that can be used to compare values internally
"""
input EventPassWhereComparatorInput {
  """
  This field can be used to request to check if the entry is outdated by internal comparison
  """
  outdated_to: Boolean
}

"""Identifies documents"""
input EventPassWhereInput {
  """Logical AND on all given filters."""
  AND: [EventPassWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EventPassWhereInput!]

  """Logical OR on all given filters."""
  OR: [EventPassWhereInput!]

  """Contains search across all appropriate fields."""
  _search: String
  createdAt: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  createdAt_not: DateTime

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime]
  createdBy: UserWhereInput
  description: String

  """All values containing the given string."""
  description_contains: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values that are contained in given list."""
  description_in: [String]

  """Any other value that exists and is not equal to the given value."""
  description_not: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values not ending with the given string"""
  description_not_ends_with: String

  """All values that are not contained in given list."""
  description_not_in: [String]

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values starting with the given string."""
  description_starts_with: String
  documentInStages_every: EventPassWhereStageInput
  documentInStages_none: EventPassWhereStageInput
  documentInStages_some: EventPassWhereStageInput
  event: EventWhereInput
  id: ID

  """All values containing the given string."""
  id_contains: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values that are contained in given list."""
  id_in: [ID]

  """Any other value that exists and is not equal to the given value."""
  id_not: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID

  """All values that are not contained in given list."""
  id_not_in: [ID]

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values starting with the given string."""
  id_starts_with: ID
  name: String

  """All values containing the given string."""
  name_contains: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values that are contained in given list."""
  name_in: [String]

  """Any other value that exists and is not equal to the given value."""
  name_not: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values not ending with the given string"""
  name_not_ends_with: String

  """All values that are not contained in given list."""
  name_not_in: [String]

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values starting with the given string."""
  name_starts_with: String
  passOptions_every: PassOptionWhereInput
  passOptions_none: PassOptionWhereInput
  passOptions_some: PassOptionWhereInput
  publishedAt: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  publishedAt_not: DateTime

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime]
  publishedBy: UserWhereInput
  scheduledIn_every: ScheduledOperationWhereInput
  scheduledIn_none: ScheduledOperationWhereInput
  scheduledIn_some: ScheduledOperationWhereInput
  updatedAt: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  updatedAt_not: DateTime

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime]
  updatedBy: UserWhereInput
}

"""
The document in stages filter allows specifying a stage entry to cross compare the same document between different stages
"""
input EventPassWhereStageInput {
  """Logical AND on all given filters."""
  AND: [EventPassWhereStageInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EventPassWhereStageInput!]

  """Logical OR on all given filters."""
  OR: [EventPassWhereStageInput!]

  """
  This field contains fields which can be set as true or false to specify an internal comparison
  """
  compareWithParent: EventPassWhereComparatorInput

  """Specify the stage to compare with"""
  stage: Stage
}

"""References EventPass record uniquely"""
input EventPassWhereUniqueInput {
  id: ID
}

input EventUpdateInput {
  """description input for default locale (en)"""
  description: RichTextAST
  eventDateLocations: EventDateLocationUpdateManyInlineInput
  eventPasses: EventPassUpdateManyInlineInput
  heroImage: AssetUpdateOneInlineInput

  """Manage document localizations"""
  localizations: EventUpdateLocalizationsInput
  nftCollectionAddress: String
  organizer: OrganizerUpdateOneInlineInput
  public: Boolean
  published: Boolean
  slug: String

  """title input for default locale (en)"""
  title: String
}

input EventUpdateLocalizationDataInput {
  description: RichTextAST
  title: String
}

input EventUpdateLocalizationInput {
  data: EventUpdateLocalizationDataInput!
  locale: Locale!
}

input EventUpdateLocalizationsInput {
  """Localizations to create"""
  create: [EventCreateLocalizationInput!]

  """Localizations to delete"""
  delete: [Locale!]

  """Localizations to update"""
  update: [EventUpdateLocalizationInput!]
  upsert: [EventUpsertLocalizationInput!]
}

input EventUpdateManyInlineInput {
  """Connect multiple existing Event documents"""
  connect: [EventConnectInput!]

  """Create and connect multiple Event documents"""
  create: [EventCreateInput!]

  """Delete multiple Event documents"""
  delete: [EventWhereUniqueInput!]

  """Disconnect multiple Event documents"""
  disconnect: [EventWhereUniqueInput!]

  """
  Override currently-connected documents with multiple existing Event documents
  """
  set: [EventWhereUniqueInput!]

  """Update multiple Event documents"""
  update: [EventUpdateWithNestedWhereUniqueInput!]

  """Upsert multiple Event documents"""
  upsert: [EventUpsertWithNestedWhereUniqueInput!]
}

input EventUpdateManyInput {
  """description input for default locale (en)"""
  description: RichTextAST

  """Optional updates to localizations"""
  localizations: EventUpdateManyLocalizationsInput
  nftCollectionAddress: String
  public: Boolean
  published: Boolean

  """title input for default locale (en)"""
  title: String
}

input EventUpdateManyLocalizationDataInput {
  description: RichTextAST
  title: String
}

input EventUpdateManyLocalizationInput {
  data: EventUpdateManyLocalizationDataInput!
  locale: Locale!
}

input EventUpdateManyLocalizationsInput {
  """Localizations to update"""
  update: [EventUpdateManyLocalizationInput!]
}

input EventUpdateOneInlineInput {
  """Connect existing Event document"""
  connect: EventWhereUniqueInput

  """Create and connect one Event document"""
  create: EventCreateInput

  """Delete currently connected Event document"""
  delete: Boolean

  """Disconnect currently connected Event document"""
  disconnect: Boolean

  """Update single Event document"""
  update: EventUpdateWithNestedWhereUniqueInput

  """Upsert single Event document"""
  upsert: EventUpsertWithNestedWhereUniqueInput
}

input EventUpdateWithNestedWhereUniqueInput {
  """Document to update"""
  data: EventUpdateInput!

  """Unique document search"""
  where: EventWhereUniqueInput!
}

input EventUpsertInput {
  """Create document if it didn't exist"""
  create: EventCreateInput!

  """Update document if it exists"""
  update: EventUpdateInput!
}

input EventUpsertLocalizationInput {
  create: EventCreateLocalizationDataInput!
  locale: Locale!
  update: EventUpdateLocalizationDataInput!
}

input EventUpsertWithNestedWhereUniqueInput {
  """Upsert data"""
  data: EventUpsertInput!

  """Unique document search"""
  where: EventWhereUniqueInput!
}

"""
This contains a set of filters that can be used to compare values internally
"""
input EventWhereComparatorInput {
  """
  This field can be used to request to check if the entry is outdated by internal comparison
  """
  outdated_to: Boolean
}

"""Identifies documents"""
input EventWhereInput {
  """Logical AND on all given filters."""
  AND: [EventWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EventWhereInput!]

  """Logical OR on all given filters."""
  OR: [EventWhereInput!]

  """Contains search across all appropriate fields."""
  _search: String
  createdAt: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  createdAt_not: DateTime

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime]
  createdBy: UserWhereInput
  documentInStages_every: EventWhereStageInput
  documentInStages_none: EventWhereStageInput
  documentInStages_some: EventWhereStageInput
  eventDateLocations_every: EventDateLocationWhereInput
  eventDateLocations_none: EventDateLocationWhereInput
  eventDateLocations_some: EventDateLocationWhereInput
  eventPasses_every: EventPassWhereInput
  eventPasses_none: EventPassWhereInput
  eventPasses_some: EventPassWhereInput
  heroImage: AssetWhereInput
  id: ID

  """All values containing the given string."""
  id_contains: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values that are contained in given list."""
  id_in: [ID]

  """Any other value that exists and is not equal to the given value."""
  id_not: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID

  """All values that are not contained in given list."""
  id_not_in: [ID]

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values starting with the given string."""
  id_starts_with: ID
  nftCollectionAddress: String

  """All values containing the given string."""
  nftCollectionAddress_contains: String

  """All values ending with the given string."""
  nftCollectionAddress_ends_with: String

  """All values that are contained in given list."""
  nftCollectionAddress_in: [String]

  """Any other value that exists and is not equal to the given value."""
  nftCollectionAddress_not: String

  """All values not containing the given string."""
  nftCollectionAddress_not_contains: String

  """All values not ending with the given string"""
  nftCollectionAddress_not_ends_with: String

  """All values that are not contained in given list."""
  nftCollectionAddress_not_in: [String]

  """All values not starting with the given string."""
  nftCollectionAddress_not_starts_with: String

  """All values starting with the given string."""
  nftCollectionAddress_starts_with: String
  organizer: OrganizerWhereInput
  public: Boolean

  """Any other value that exists and is not equal to the given value."""
  public_not: Boolean
  published: Boolean
  publishedAt: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  publishedAt_not: DateTime

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime]
  publishedBy: UserWhereInput

  """Any other value that exists and is not equal to the given value."""
  published_not: Boolean
  scheduledIn_every: ScheduledOperationWhereInput
  scheduledIn_none: ScheduledOperationWhereInput
  scheduledIn_some: ScheduledOperationWhereInput
  slug: String

  """All values containing the given string."""
  slug_contains: String

  """All values ending with the given string."""
  slug_ends_with: String

  """All values that are contained in given list."""
  slug_in: [String]

  """Any other value that exists and is not equal to the given value."""
  slug_not: String

  """All values not containing the given string."""
  slug_not_contains: String

  """All values not ending with the given string"""
  slug_not_ends_with: String

  """All values that are not contained in given list."""
  slug_not_in: [String]

  """All values not starting with the given string."""
  slug_not_starts_with: String

  """All values starting with the given string."""
  slug_starts_with: String
  title: String

  """All values containing the given string."""
  title_contains: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values that are contained in given list."""
  title_in: [String]

  """Any other value that exists and is not equal to the given value."""
  title_not: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values not ending with the given string"""
  title_not_ends_with: String

  """All values that are not contained in given list."""
  title_not_in: [String]

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values starting with the given string."""
  title_starts_with: String
  updatedAt: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  updatedAt_not: DateTime

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime]
  updatedBy: UserWhereInput
}

"""
The document in stages filter allows specifying a stage entry to cross compare the same document between different stages
"""
input EventWhereStageInput {
  """Logical AND on all given filters."""
  AND: [EventWhereStageInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EventWhereStageInput!]

  """Logical OR on all given filters."""
  OR: [EventWhereStageInput!]

  """
  This field contains fields which can be set as true or false to specify an internal comparison
  """
  compareWithParent: EventWhereComparatorInput

  """Specify the stage to compare with"""
  stage: Stage
}

"""References Event record uniquely"""
input EventWhereUniqueInput {
  id: ID
  slug: String
}

enum ImageFit {
  """
  Resizes the image to fit within the specified parameters without distorting, cropping, or changing the aspect ratio.
  """
  clip

  """
  Resizes the image to fit the specified parameters exactly by removing any parts of the image that don't fit within the boundaries.
  """
  crop

  """
  Resizes the image to fit within the parameters, but as opposed to 'fit:clip' will not scale the image if the image is smaller than the output size.
  """
  max

  """
  Resizes the image to fit the specified parameters exactly by scaling the image to the desired size. The aspect ratio of the image is not respected and the image can be distorted using this method.
  """
  scale
}

input ImageResizeInput {
  """The default value for the fit parameter is fit:clip."""
  fit: ImageFit

  """
  The height in pixels to resize the image to. The value must be an integer from 1 to 10000.
  """
  height: Int

  """
  The width in pixels to resize the image to. The value must be an integer from 1 to 10000.
  """
  width: Int
}

"""Transformations for Images"""
input ImageTransformationInput {
  """Resizes the image"""
  resize: ImageResizeInput
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""Raw JSON value"""
scalar Json

"""Locale system enumeration"""
enum Locale {
  """System locale"""
  en
  fr
}

"""Representing a geolocation point with latitude and longitude"""
type Location {
  distance(from: LocationInput!): Float!
  latitude: Float!
  longitude: Float!
}

"""
A model for location data (point on a map) + additional info such as street, venue etc.
"""
type LocationAddress {
  """Name of the city"""
  city: String!

  """Point into the map where the event is happening"""
  coordinates: Location!

  """The name of the country"""
  country: String!

  """The unique identifier"""
  id: ID!

  """Place ID from google maps"""
  placeId: String
  postalCode: String!

  """System stage field"""
  stage: Stage!

  """The name of the state if it exist"""
  state: String

  """Name of the street"""
  street: String

  """Name of the venue, useful if the address doesn't apply"""
  venue: String
}

input LocationAddressCreateInput {
  city: String!
  coordinates: LocationInput!
  country: String!
  placeId: String
  postalCode: String!
  state: String
  street: String
  venue: String
}

input LocationAddressCreateOneInlineInput {
  """Create and connect one LocationAddress document"""
  create: LocationAddressCreateInput
}

input LocationAddressUpdateInput {
  city: String
  coordinates: LocationInput
  country: String
  placeId: String
  postalCode: String
  state: String
  street: String
  venue: String
}

input LocationAddressUpdateOneInlineInput {
  """Create and connect one LocationAddress document"""
  create: LocationAddressCreateInput

  """Delete currently connected LocationAddress document"""
  delete: Boolean

  """Update single LocationAddress document"""
  update: LocationAddressUpdateWithNestedWhereUniqueInput

  """Upsert single LocationAddress document"""
  upsert: LocationAddressUpsertWithNestedWhereUniqueInput
}

input LocationAddressUpdateWithNestedWhereUniqueInput {
  """Document to update"""
  data: LocationAddressUpdateInput!

  """Unique document search"""
  where: LocationAddressWhereUniqueInput!
}

input LocationAddressUpsertInput {
  """Create document if it didn't exist"""
  create: LocationAddressCreateInput!

  """Update document if it exists"""
  update: LocationAddressUpdateInput!
}

input LocationAddressUpsertWithNestedWhereUniqueInput {
  """Upsert data"""
  data: LocationAddressUpsertInput!

  """Unique document search"""
  where: LocationAddressWhereUniqueInput!
}

"""Identifies documents"""
input LocationAddressWhereInput {
  """Logical AND on all given filters."""
  AND: [LocationAddressWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LocationAddressWhereInput!]

  """Logical OR on all given filters."""
  OR: [LocationAddressWhereInput!]

  """Contains search across all appropriate fields."""
  _search: String
  city: String

  """All values containing the given string."""
  city_contains: String

  """All values ending with the given string."""
  city_ends_with: String

  """All values that are contained in given list."""
  city_in: [String]

  """Any other value that exists and is not equal to the given value."""
  city_not: String

  """All values not containing the given string."""
  city_not_contains: String

  """All values not ending with the given string"""
  city_not_ends_with: String

  """All values that are not contained in given list."""
  city_not_in: [String]

  """All values not starting with the given string."""
  city_not_starts_with: String

  """All values starting with the given string."""
  city_starts_with: String
  country: String

  """All values containing the given string."""
  country_contains: String

  """All values ending with the given string."""
  country_ends_with: String

  """All values that are contained in given list."""
  country_in: [String]

  """Any other value that exists and is not equal to the given value."""
  country_not: String

  """All values not containing the given string."""
  country_not_contains: String

  """All values not ending with the given string"""
  country_not_ends_with: String

  """All values that are not contained in given list."""
  country_not_in: [String]

  """All values not starting with the given string."""
  country_not_starts_with: String

  """All values starting with the given string."""
  country_starts_with: String
  id: ID

  """All values containing the given string."""
  id_contains: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values that are contained in given list."""
  id_in: [ID]

  """Any other value that exists and is not equal to the given value."""
  id_not: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID

  """All values that are not contained in given list."""
  id_not_in: [ID]

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values starting with the given string."""
  id_starts_with: ID
  placeId: String

  """All values containing the given string."""
  placeId_contains: String

  """All values ending with the given string."""
  placeId_ends_with: String

  """All values that are contained in given list."""
  placeId_in: [String]

  """Any other value that exists and is not equal to the given value."""
  placeId_not: String

  """All values not containing the given string."""
  placeId_not_contains: String

  """All values not ending with the given string"""
  placeId_not_ends_with: String

  """All values that are not contained in given list."""
  placeId_not_in: [String]

  """All values not starting with the given string."""
  placeId_not_starts_with: String

  """All values starting with the given string."""
  placeId_starts_with: String
  postalCode: String

  """All values containing the given string."""
  postalCode_contains: String

  """All values ending with the given string."""
  postalCode_ends_with: String

  """All values that are contained in given list."""
  postalCode_in: [String]

  """Any other value that exists and is not equal to the given value."""
  postalCode_not: String

  """All values not containing the given string."""
  postalCode_not_contains: String

  """All values not ending with the given string"""
  postalCode_not_ends_with: String

  """All values that are not contained in given list."""
  postalCode_not_in: [String]

  """All values not starting with the given string."""
  postalCode_not_starts_with: String

  """All values starting with the given string."""
  postalCode_starts_with: String
  state: String

  """All values containing the given string."""
  state_contains: String

  """All values ending with the given string."""
  state_ends_with: String

  """All values that are contained in given list."""
  state_in: [String]

  """Any other value that exists and is not equal to the given value."""
  state_not: String

  """All values not containing the given string."""
  state_not_contains: String

  """All values not ending with the given string"""
  state_not_ends_with: String

  """All values that are not contained in given list."""
  state_not_in: [String]

  """All values not starting with the given string."""
  state_not_starts_with: String

  """All values starting with the given string."""
  state_starts_with: String
  street: String

  """All values containing the given string."""
  street_contains: String

  """All values ending with the given string."""
  street_ends_with: String

  """All values that are contained in given list."""
  street_in: [String]

  """Any other value that exists and is not equal to the given value."""
  street_not: String

  """All values not containing the given string."""
  street_not_contains: String

  """All values not ending with the given string"""
  street_not_ends_with: String

  """All values that are not contained in given list."""
  street_not_in: [String]

  """All values not starting with the given string."""
  street_not_starts_with: String

  """All values starting with the given string."""
  street_starts_with: String
  venue: String

  """All values containing the given string."""
  venue_contains: String

  """All values ending with the given string."""
  venue_ends_with: String

  """All values that are contained in given list."""
  venue_in: [String]

  """Any other value that exists and is not equal to the given value."""
  venue_not: String

  """All values not containing the given string."""
  venue_not_contains: String

  """All values not ending with the given string"""
  venue_not_ends_with: String

  """All values that are not contained in given list."""
  venue_not_in: [String]

  """All values not starting with the given string."""
  venue_not_starts_with: String

  """All values starting with the given string."""
  venue_starts_with: String
}

"""References LocationAddress record uniquely"""
input LocationAddressWhereUniqueInput {
  id: ID
}

"""Input for a geolocation point with latitude and longitude"""
input LocationInput {
  latitude: Float!
  longitude: Float!
}

"""
The Long scalar type represents non-fractional signed whole numeric values. Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!

  """The Stage of an object"""
  stage: Stage!
}

"""
An organizer is an entity that launch events and handle the pass benefits.
"""
type Organizer implements Node {
  """The time the document was created"""
  createdAt(
    """
    Variation of DateTime field to return, allows value from base document, current localization, or combined by returning the newer value of both
    """
    variation: SystemDateTimeFieldVariation! = COMBINED
  ): DateTime!

  """User that created this document"""
  createdBy(
    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `createdBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `createdBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
  ): User
  description: OrganizerDescriptionRichText

  """Get the document in other stages"""
  documentInStages(
    """Decides if the current stage should be included or not"""
    includeCurrent: Boolean! = false

    """
    Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree
    """
    inheritLocale: Boolean! = false

    """Potential stages that should be returned"""
    stages: [Stage!]! = [DRAFT, PUBLISHED]
  ): [Organizer!]!
  events(
    after: String
    before: String
    first: Int

    """
    Sets the locale of the parent document as the first locale in the fallback locales in the query's subtree.
    
    Note that `events` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, localized entries that do not have the provided locale defined will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
    last: Int

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `events` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, localized entries that do not have the provided locale defined will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
    orderBy: EventOrderByInput
    skip: Int
    where: EventWhereInput
  ): [Event!]!

  """List of Organizer versions"""
  history(
    limit: Int! = 10
    skip: Int! = 0

    """
    This is optional and can be used to fetch the document version history for a specific stage instead of the current one
    """
    stageOverride: Stage
  ): [Version!]!

  """The unique identifier"""
  id: ID!
  image(
    """
    Sets the locale of the parent document as the first locale in the fallback locales in the query's subtree.
    
    Note that `image` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, localized entries that do not have the provided locale defined will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `image` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, localized entries that do not have the provided locale defined will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
  ): Asset!

  """System Locale field"""
  locale: Locale!

  """Get the other localizations for this document"""
  localizations(
    """Decides if the current locale should be included or not"""
    includeCurrent: Boolean! = false

    """
    Potential locales that should be returned. 
    
    The order of locales will also override locale fall-backing behaviour in the query's subtree.
    
    Note any related model with localized fields in the query's subtree will be affected.
    The first locale matching the provided list will be returned, localized entries that do not have the provided locale defined will be filtered out.
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    
    Consider using this in conjunction with forceParentLocale on the children relation fields.
    """
    locales: [Locale!]! = [en, fr]
  ): [Organizer!]!

  """Name of the organizer"""
  name: String!

  """The time the document was published. Null on documents in draft stage."""
  publishedAt(
    """
    Variation of DateTime field to return, allows value from base document, current localization, or combined by returning the newer value of both
    """
    variation: SystemDateTimeFieldVariation! = COMBINED
  ): DateTime

  """User that last published this document"""
  publishedBy(
    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `publishedBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `publishedBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
  ): User
  scheduledIn(
    after: String
    before: String
    first: Int

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `scheduledIn` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
    last: Int

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `scheduledIn` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
    skip: Int
    where: ScheduledOperationWhereInput
  ): [ScheduledOperation!]!

  """Used in URL"""
  slug: String!

  """System stage field"""
  stage: Stage!

  """The time the document was updated"""
  updatedAt(
    """
    Variation of DateTime field to return, allows value from base document, current localization, or combined by returning the newer value of both
    """
    variation: SystemDateTimeFieldVariation! = COMBINED
  ): DateTime!

  """User that last updated this document"""
  updatedBy(
    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `updatedBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `updatedBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
  ): User
}

input OrganizerConnectInput {
  """
  Allow to specify document position in list of connected documents, will default to appending at end of list
  """
  position: ConnectPositionInput

  """Document to connect"""
  where: OrganizerWhereUniqueInput!
}

"""A connection to a list of items."""
type OrganizerConnection {
  aggregate: Aggregate!

  """A list of edges."""
  edges: [OrganizerEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

input OrganizerCreateInput {
  createdAt: DateTime

  """description input for default locale (en)"""
  description: RichTextAST
  events: EventCreateManyInlineInput
  image: AssetCreateOneInlineInput!

  """
  Inline mutations for managing document localizations excluding the default locale
  """
  localizations: OrganizerCreateLocalizationsInput
  name: String!
  slug: String!
  updatedAt: DateTime
}

input OrganizerCreateLocalizationDataInput {
  createdAt: DateTime
  description: RichTextAST
  updatedAt: DateTime
}

input OrganizerCreateLocalizationInput {
  """Localization input"""
  data: OrganizerCreateLocalizationDataInput!
  locale: Locale!
}

input OrganizerCreateLocalizationsInput {
  """Create localizations for the newly-created document"""
  create: [OrganizerCreateLocalizationInput!]
}

input OrganizerCreateManyInlineInput {
  """Connect multiple existing Organizer documents"""
  connect: [OrganizerWhereUniqueInput!]

  """Create and connect multiple existing Organizer documents"""
  create: [OrganizerCreateInput!]
}

input OrganizerCreateOneInlineInput {
  """Connect one existing Organizer document"""
  connect: OrganizerWhereUniqueInput

  """Create and connect one Organizer document"""
  create: OrganizerCreateInput
}

type OrganizerDescriptionRichText {
  """Returns HTMl representation"""
  html: String!
  json: RichTextAST!

  """Returns Markdown representation"""
  markdown: String!
  raw: RichTextAST!
  references(after: String, before: String, first: Int, last: Int, skip: Int): [OrganizerDescriptionRichTextEmbeddedTypes!]!

  """Returns plain-text contents of RichText"""
  text: String!
}

union OrganizerDescriptionRichTextEmbeddedTypes = Asset

"""An edge in a connection."""
type OrganizerEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Organizer!
}

"""Identifies documents"""
input OrganizerManyWhereInput {
  """Logical AND on all given filters."""
  AND: [OrganizerWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OrganizerWhereInput!]

  """Logical OR on all given filters."""
  OR: [OrganizerWhereInput!]

  """Contains search across all appropriate fields."""
  _search: String
  createdAt: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  createdAt_not: DateTime

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime]
  createdBy: UserWhereInput
  documentInStages_every: OrganizerWhereStageInput
  documentInStages_none: OrganizerWhereStageInput
  documentInStages_some: OrganizerWhereStageInput
  events_every: EventWhereInput
  events_none: EventWhereInput
  events_some: EventWhereInput
  id: ID

  """All values containing the given string."""
  id_contains: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values that are contained in given list."""
  id_in: [ID]

  """Any other value that exists and is not equal to the given value."""
  id_not: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID

  """All values that are not contained in given list."""
  id_not_in: [ID]

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values starting with the given string."""
  id_starts_with: ID
  image: AssetWhereInput
  name: String

  """All values containing the given string."""
  name_contains: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values that are contained in given list."""
  name_in: [String]

  """Any other value that exists and is not equal to the given value."""
  name_not: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values not ending with the given string"""
  name_not_ends_with: String

  """All values that are not contained in given list."""
  name_not_in: [String]

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values starting with the given string."""
  name_starts_with: String
  publishedAt: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  publishedAt_not: DateTime

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime]
  publishedBy: UserWhereInput
  scheduledIn_every: ScheduledOperationWhereInput
  scheduledIn_none: ScheduledOperationWhereInput
  scheduledIn_some: ScheduledOperationWhereInput
  slug: String

  """All values containing the given string."""
  slug_contains: String

  """All values ending with the given string."""
  slug_ends_with: String

  """All values that are contained in given list."""
  slug_in: [String]

  """Any other value that exists and is not equal to the given value."""
  slug_not: String

  """All values not containing the given string."""
  slug_not_contains: String

  """All values not ending with the given string"""
  slug_not_ends_with: String

  """All values that are not contained in given list."""
  slug_not_in: [String]

  """All values not starting with the given string."""
  slug_not_starts_with: String

  """All values starting with the given string."""
  slug_starts_with: String
  updatedAt: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  updatedAt_not: DateTime

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime]
  updatedBy: UserWhereInput
}

enum OrganizerOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  publishedAt_ASC
  publishedAt_DESC
  slug_ASC
  slug_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input OrganizerUpdateInput {
  """description input for default locale (en)"""
  description: RichTextAST
  events: EventUpdateManyInlineInput
  image: AssetUpdateOneInlineInput

  """Manage document localizations"""
  localizations: OrganizerUpdateLocalizationsInput
  name: String
  slug: String
}

input OrganizerUpdateLocalizationDataInput {
  description: RichTextAST
}

input OrganizerUpdateLocalizationInput {
  data: OrganizerUpdateLocalizationDataInput!
  locale: Locale!
}

input OrganizerUpdateLocalizationsInput {
  """Localizations to create"""
  create: [OrganizerCreateLocalizationInput!]

  """Localizations to delete"""
  delete: [Locale!]

  """Localizations to update"""
  update: [OrganizerUpdateLocalizationInput!]
  upsert: [OrganizerUpsertLocalizationInput!]
}

input OrganizerUpdateManyInlineInput {
  """Connect multiple existing Organizer documents"""
  connect: [OrganizerConnectInput!]

  """Create and connect multiple Organizer documents"""
  create: [OrganizerCreateInput!]

  """Delete multiple Organizer documents"""
  delete: [OrganizerWhereUniqueInput!]

  """Disconnect multiple Organizer documents"""
  disconnect: [OrganizerWhereUniqueInput!]

  """
  Override currently-connected documents with multiple existing Organizer documents
  """
  set: [OrganizerWhereUniqueInput!]

  """Update multiple Organizer documents"""
  update: [OrganizerUpdateWithNestedWhereUniqueInput!]

  """Upsert multiple Organizer documents"""
  upsert: [OrganizerUpsertWithNestedWhereUniqueInput!]
}

input OrganizerUpdateManyInput {
  """description input for default locale (en)"""
  description: RichTextAST

  """Optional updates to localizations"""
  localizations: OrganizerUpdateManyLocalizationsInput
}

input OrganizerUpdateManyLocalizationDataInput {
  description: RichTextAST
}

input OrganizerUpdateManyLocalizationInput {
  data: OrganizerUpdateManyLocalizationDataInput!
  locale: Locale!
}

input OrganizerUpdateManyLocalizationsInput {
  """Localizations to update"""
  update: [OrganizerUpdateManyLocalizationInput!]
}

input OrganizerUpdateOneInlineInput {
  """Connect existing Organizer document"""
  connect: OrganizerWhereUniqueInput

  """Create and connect one Organizer document"""
  create: OrganizerCreateInput

  """Delete currently connected Organizer document"""
  delete: Boolean

  """Disconnect currently connected Organizer document"""
  disconnect: Boolean

  """Update single Organizer document"""
  update: OrganizerUpdateWithNestedWhereUniqueInput

  """Upsert single Organizer document"""
  upsert: OrganizerUpsertWithNestedWhereUniqueInput
}

input OrganizerUpdateWithNestedWhereUniqueInput {
  """Document to update"""
  data: OrganizerUpdateInput!

  """Unique document search"""
  where: OrganizerWhereUniqueInput!
}

input OrganizerUpsertInput {
  """Create document if it didn't exist"""
  create: OrganizerCreateInput!

  """Update document if it exists"""
  update: OrganizerUpdateInput!
}

input OrganizerUpsertLocalizationInput {
  create: OrganizerCreateLocalizationDataInput!
  locale: Locale!
  update: OrganizerUpdateLocalizationDataInput!
}

input OrganizerUpsertWithNestedWhereUniqueInput {
  """Upsert data"""
  data: OrganizerUpsertInput!

  """Unique document search"""
  where: OrganizerWhereUniqueInput!
}

"""
This contains a set of filters that can be used to compare values internally
"""
input OrganizerWhereComparatorInput {
  """
  This field can be used to request to check if the entry is outdated by internal comparison
  """
  outdated_to: Boolean
}

"""Identifies documents"""
input OrganizerWhereInput {
  """Logical AND on all given filters."""
  AND: [OrganizerWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OrganizerWhereInput!]

  """Logical OR on all given filters."""
  OR: [OrganizerWhereInput!]

  """Contains search across all appropriate fields."""
  _search: String
  createdAt: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  createdAt_not: DateTime

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime]
  createdBy: UserWhereInput
  documentInStages_every: OrganizerWhereStageInput
  documentInStages_none: OrganizerWhereStageInput
  documentInStages_some: OrganizerWhereStageInput
  events_every: EventWhereInput
  events_none: EventWhereInput
  events_some: EventWhereInput
  id: ID

  """All values containing the given string."""
  id_contains: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values that are contained in given list."""
  id_in: [ID]

  """Any other value that exists and is not equal to the given value."""
  id_not: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID

  """All values that are not contained in given list."""
  id_not_in: [ID]

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values starting with the given string."""
  id_starts_with: ID
  image: AssetWhereInput
  name: String

  """All values containing the given string."""
  name_contains: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values that are contained in given list."""
  name_in: [String]

  """Any other value that exists and is not equal to the given value."""
  name_not: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values not ending with the given string"""
  name_not_ends_with: String

  """All values that are not contained in given list."""
  name_not_in: [String]

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values starting with the given string."""
  name_starts_with: String
  publishedAt: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  publishedAt_not: DateTime

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime]
  publishedBy: UserWhereInput
  scheduledIn_every: ScheduledOperationWhereInput
  scheduledIn_none: ScheduledOperationWhereInput
  scheduledIn_some: ScheduledOperationWhereInput
  slug: String

  """All values containing the given string."""
  slug_contains: String

  """All values ending with the given string."""
  slug_ends_with: String

  """All values that are contained in given list."""
  slug_in: [String]

  """Any other value that exists and is not equal to the given value."""
  slug_not: String

  """All values not containing the given string."""
  slug_not_contains: String

  """All values not ending with the given string"""
  slug_not_ends_with: String

  """All values that are not contained in given list."""
  slug_not_in: [String]

  """All values not starting with the given string."""
  slug_not_starts_with: String

  """All values starting with the given string."""
  slug_starts_with: String
  updatedAt: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  updatedAt_not: DateTime

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime]
  updatedBy: UserWhereInput
}

"""
The document in stages filter allows specifying a stage entry to cross compare the same document between different stages
"""
input OrganizerWhereStageInput {
  """Logical AND on all given filters."""
  AND: [OrganizerWhereStageInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OrganizerWhereStageInput!]

  """Logical OR on all given filters."""
  OR: [OrganizerWhereStageInput!]

  """
  This field contains fields which can be set as true or false to specify an internal comparison
  """
  compareWithParent: OrganizerWhereComparatorInput

  """Specify the stage to compare with"""
  stage: Stage
}

"""References Organizer record uniquely"""
input OrganizerWhereUniqueInput {
  id: ID
  name: String
  slug: String
}

"""References Organizer record uniquely"""
input OrganizerWhereUniqueInput_remote_rel_accountorganizer {
  name: String
  slug: String
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """Number of items in the current page."""
  pageSize: Int

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""
Define the options of an 'Event Pass' on an 'Event Date Location'. You can define severals if the event have multiple locations.
"""
type PassOption {
  """
  Description of the option, like "Access to the event on Day 1"
  """
  description: String

  """
  Define the location and date for this option.
  Important ! It will determine the release and availability for the Pass access.
  """
  eventDateLocation(
    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `eventDateLocation` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `eventDateLocation` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
  ): EventDateLocation!

  """The unique identifier"""
  id: ID!

  """System Locale field"""
  locale: Locale!

  """Get the other localizations for this document"""
  localizations(
    """Decides if the current locale should be included or not"""
    includeCurrent: Boolean! = false

    """
    Potential locales that should be returned. 
    
    The order of locales will also override locale fall-backing behaviour in the query's subtree.
    
    Note any related model with localized fields in the query's subtree will be affected.
    The first locale matching the provided list will be returned, localized entries that do not have the provided locale defined will be filtered out.
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    
    Consider using this in conjunction with forceParentLocale on the children relation fields.
    """
    locales: [Locale!]! = [en, fr]
  ): [PassOption!]!

  """
  Name of the options, like "Day 1 Access" or "VIP Room Access"
  """
  name: String!

  """System stage field"""
  stage: Stage!
}

input PassOptionCreateInput {
  """description input for default locale (en)"""
  description: String
  eventDateLocation: EventDateLocationCreateOneInlineInput!

  """
  Inline mutations for managing document localizations excluding the default locale
  """
  localizations: PassOptionCreateLocalizationsInput

  """name input for default locale (en)"""
  name: String!
}

input PassOptionCreateLocalizationDataInput {
  description: String
  name: String!
}

input PassOptionCreateLocalizationInput {
  """Localization input"""
  data: PassOptionCreateLocalizationDataInput!
  locale: Locale!
}

input PassOptionCreateLocalizationsInput {
  """Create localizations for the newly-created document"""
  create: [PassOptionCreateLocalizationInput!]
}

input PassOptionCreateManyInlineInput {
  """Create and connect multiple existing PassOption documents"""
  create: [PassOptionCreateInput!]
}

input PassOptionCreateWithPositionInput {
  """Document to create"""
  data: PassOptionCreateInput!

  """
  Position in the list of existing component instances, will default to appending at the end of list
  """
  position: ConnectPositionInput
}

enum PassOptionOrderByInput {
  description_ASC
  description_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

input PassOptionUpdateInput {
  """description input for default locale (en)"""
  description: String
  eventDateLocation: EventDateLocationUpdateOneInlineInput

  """Manage document localizations"""
  localizations: PassOptionUpdateLocalizationsInput

  """name input for default locale (en)"""
  name: String
}

input PassOptionUpdateLocalizationDataInput {
  description: String
  name: String
}

input PassOptionUpdateLocalizationInput {
  data: PassOptionUpdateLocalizationDataInput!
  locale: Locale!
}

input PassOptionUpdateLocalizationsInput {
  """Localizations to create"""
  create: [PassOptionCreateLocalizationInput!]

  """Localizations to delete"""
  delete: [Locale!]

  """Localizations to update"""
  update: [PassOptionUpdateLocalizationInput!]
  upsert: [PassOptionUpsertLocalizationInput!]
}

input PassOptionUpdateManyInlineInput {
  """Create and connect multiple PassOption component instances"""
  create: [PassOptionCreateWithPositionInput!]

  """Delete multiple PassOption documents"""
  delete: [PassOptionWhereUniqueInput!]

  """Update multiple PassOption component instances"""
  update: [PassOptionUpdateWithNestedWhereUniqueAndPositionInput!]

  """Upsert multiple PassOption component instances"""
  upsert: [PassOptionUpsertWithNestedWhereUniqueAndPositionInput!]
}

input PassOptionUpdateWithNestedWhereUniqueAndPositionInput {
  """Document to update"""
  data: PassOptionUpdateInput

  """
  Position in the list of existing component instances, will default to appending at the end of list
  """
  position: ConnectPositionInput

  """Unique component instance search"""
  where: PassOptionWhereUniqueInput!
}

input PassOptionUpsertInput {
  """Create document if it didn't exist"""
  create: PassOptionCreateInput!

  """Update document if it exists"""
  update: PassOptionUpdateInput!
}

input PassOptionUpsertLocalizationInput {
  create: PassOptionCreateLocalizationDataInput!
  locale: Locale!
  update: PassOptionUpdateLocalizationDataInput!
}

input PassOptionUpsertWithNestedWhereUniqueAndPositionInput {
  """Document to upsert"""
  data: PassOptionUpsertInput

  """
  Position in the list of existing component instances, will default to appending at the end of list
  """
  position: ConnectPositionInput

  """Unique component instance search"""
  where: PassOptionWhereUniqueInput!
}

"""Identifies documents"""
input PassOptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PassOptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PassOptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PassOptionWhereInput!]

  """Contains search across all appropriate fields."""
  _search: String
  description: String

  """All values containing the given string."""
  description_contains: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values that are contained in given list."""
  description_in: [String]

  """Any other value that exists and is not equal to the given value."""
  description_not: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values not ending with the given string"""
  description_not_ends_with: String

  """All values that are not contained in given list."""
  description_not_in: [String]

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values starting with the given string."""
  description_starts_with: String
  eventDateLocation: EventDateLocationWhereInput
  id: ID

  """All values containing the given string."""
  id_contains: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values that are contained in given list."""
  id_in: [ID]

  """Any other value that exists and is not equal to the given value."""
  id_not: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID

  """All values that are not contained in given list."""
  id_not_in: [ID]

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values starting with the given string."""
  id_starts_with: ID
  name: String

  """All values containing the given string."""
  name_contains: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values that are contained in given list."""
  name_in: [String]

  """Any other value that exists and is not equal to the given value."""
  name_not: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values not ending with the given string"""
  name_not_ends_with: String

  """All values that are not contained in given list."""
  name_not_in: [String]

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values starting with the given string."""
  name_starts_with: String
}

"""References PassOption record uniquely"""
input PassOptionWhereUniqueInput {
  id: ID
}

"""Slate-compatible RichText AST"""
scalar RichTextAST

"""Scheduled Operation system model"""
type ScheduledOperation implements Node {
  affectedDocuments(
    after: String
    before: String
    first: Int

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `affectedDocuments` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
    last: Int

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `affectedDocuments` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
    skip: Int
  ): [ScheduledOperationAffectedDocument!]!

  """The time the document was created"""
  createdAt: DateTime!

  """User that created this document"""
  createdBy(
    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `createdBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `createdBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
  ): User

  """Operation description"""
  description: String

  """Get the document in other stages"""
  documentInStages(
    """Decides if the current stage should be included or not"""
    includeCurrent: Boolean! = false

    """
    Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree
    """
    inheritLocale: Boolean! = false

    """Potential stages that should be returned"""
    stages: [Stage!]! = [DRAFT, PUBLISHED]
  ): [ScheduledOperation!]!

  """Operation error message"""
  errorMessage: String

  """The unique identifier"""
  id: ID!

  """The time the document was published. Null on documents in draft stage."""
  publishedAt: DateTime

  """User that last published this document"""
  publishedBy(
    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `publishedBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `publishedBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
  ): User

  """
  Raw operation payload including all details, this field is subject to change
  """
  rawPayload: Json!

  """The release this operation is scheduled for"""
  release(
    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `release` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `release` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
  ): ScheduledRelease

  """System stage field"""
  stage: Stage!

  """operation Status"""
  status: ScheduledOperationStatus!

  """The time the document was updated"""
  updatedAt: DateTime!

  """User that last updated this document"""
  updatedBy(
    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `updatedBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `updatedBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
  ): User
}

union ScheduledOperationAffectedDocument = Asset | Event | EventPass | Organizer

"""A connection to a list of items."""
type ScheduledOperationConnection {
  aggregate: Aggregate!

  """A list of edges."""
  edges: [ScheduledOperationEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type ScheduledOperationEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: ScheduledOperation!
}

enum ScheduledOperationOrderByInput {
  createdAt_ASC
  createdAt_DESC
  description_ASC
  description_DESC
  errorMessage_ASC
  errorMessage_DESC
  id_ASC
  id_DESC
  publishedAt_ASC
  publishedAt_DESC
  status_ASC
  status_DESC
  updatedAt_ASC
  updatedAt_DESC
}

"""System Scheduled Operation Status"""
enum ScheduledOperationStatus {
  CANCELED
  COMPLETED
  FAILED
  IN_PROGRESS
  PENDING
}

"""Identifies documents"""
input ScheduledOperationWhereInput {
  """Logical AND on all given filters."""
  AND: [ScheduledOperationWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ScheduledOperationWhereInput!]

  """Logical OR on all given filters."""
  OR: [ScheduledOperationWhereInput!]

  """Contains search across all appropriate fields."""
  _search: String
  createdAt: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  createdAt_not: DateTime

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime]
  createdBy: UserWhereInput
  description: String

  """All values containing the given string."""
  description_contains: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values that are contained in given list."""
  description_in: [String]

  """Any other value that exists and is not equal to the given value."""
  description_not: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values not ending with the given string"""
  description_not_ends_with: String

  """All values that are not contained in given list."""
  description_not_in: [String]

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values starting with the given string."""
  description_starts_with: String
  errorMessage: String

  """All values containing the given string."""
  errorMessage_contains: String

  """All values ending with the given string."""
  errorMessage_ends_with: String

  """All values that are contained in given list."""
  errorMessage_in: [String]

  """Any other value that exists and is not equal to the given value."""
  errorMessage_not: String

  """All values not containing the given string."""
  errorMessage_not_contains: String

  """All values not ending with the given string"""
  errorMessage_not_ends_with: String

  """All values that are not contained in given list."""
  errorMessage_not_in: [String]

  """All values not starting with the given string."""
  errorMessage_not_starts_with: String

  """All values starting with the given string."""
  errorMessage_starts_with: String
  id: ID

  """All values containing the given string."""
  id_contains: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values that are contained in given list."""
  id_in: [ID]

  """Any other value that exists and is not equal to the given value."""
  id_not: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID

  """All values that are not contained in given list."""
  id_not_in: [ID]

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values starting with the given string."""
  id_starts_with: ID
  publishedAt: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  publishedAt_not: DateTime

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime]
  publishedBy: UserWhereInput

  """All values containing the given json path."""
  rawPayload_json_path_exists: String

  """
  Recursively tries to find the provided JSON scalar value inside the field.
  It does use an exact match when comparing values.
  If you pass `null` as value the filter will be ignored. 
  Note: This filter fails if you try to look for a non scalar JSON value!
  """
  rawPayload_value_recursive: Json
  release: ScheduledReleaseWhereInput
  status: ScheduledOperationStatus

  """All values that are contained in given list."""
  status_in: [ScheduledOperationStatus]

  """Any other value that exists and is not equal to the given value."""
  status_not: ScheduledOperationStatus

  """All values that are not contained in given list."""
  status_not_in: [ScheduledOperationStatus]
  updatedAt: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  updatedAt_not: DateTime

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime]
  updatedBy: UserWhereInput
}

"""References ScheduledOperation record uniquely"""
input ScheduledOperationWhereUniqueInput {
  id: ID
}

"""Scheduled Release system model"""
type ScheduledRelease implements Node {
  """The time the document was created"""
  createdAt: DateTime!

  """User that created this document"""
  createdBy(
    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `createdBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `createdBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
  ): User

  """Release description"""
  description: String

  """Get the document in other stages"""
  documentInStages(
    """Decides if the current stage should be included or not"""
    includeCurrent: Boolean! = false

    """
    Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree
    """
    inheritLocale: Boolean! = false

    """Potential stages that should be returned"""
    stages: [Stage!]! = [DRAFT, PUBLISHED]
  ): [ScheduledRelease!]!

  """Release error message"""
  errorMessage: String

  """The unique identifier"""
  id: ID!

  """Whether scheduled release should be run"""
  isActive: Boolean!

  """Whether scheduled release is implicit"""
  isImplicit: Boolean!

  """Operations to run with this release"""
  operations(
    after: String
    before: String
    first: Int

    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `operations` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean
    last: Int

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `operations` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
    orderBy: ScheduledOperationOrderByInput
    skip: Int
    where: ScheduledOperationWhereInput
  ): [ScheduledOperation!]!

  """The time the document was published. Null on documents in draft stage."""
  publishedAt: DateTime

  """User that last published this document"""
  publishedBy(
    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `publishedBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `publishedBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
  ): User

  """Release date and time"""
  releaseAt: DateTime

  """System stage field"""
  stage: Stage!

  """Release Status"""
  status: ScheduledReleaseStatus!

  """Release Title"""
  title: String

  """The time the document was updated"""
  updatedAt: DateTime!

  """User that last updated this document"""
  updatedBy(
    """
    Sets the locale of the resolved parent document as the only locale in the query's subtree.
    
    Note that `updatedBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will affect any existing locale filtering defined in the query's tree for the subtree.
    """
    forceParentLocale: Boolean

    """
    Allows to optionally override locale filtering behaviour in the query's subtree.
    
    Note that `updatedBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
    """
    locales: [Locale!]
  ): User
}

"""A connection to a list of items."""
type ScheduledReleaseConnection {
  aggregate: Aggregate!

  """A list of edges."""
  edges: [ScheduledReleaseEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

input ScheduledReleaseCreateInput {
  createdAt: DateTime
  description: String
  errorMessage: String
  isActive: Boolean = true
  releaseAt: DateTime
  title: String
  updatedAt: DateTime
}

"""An edge in a connection."""
type ScheduledReleaseEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: ScheduledRelease!
}

enum ScheduledReleaseOrderByInput {
  createdAt_ASC
  createdAt_DESC
  description_ASC
  description_DESC
  errorMessage_ASC
  errorMessage_DESC
  id_ASC
  id_DESC
  isActive_ASC
  isActive_DESC
  isImplicit_ASC
  isImplicit_DESC
  publishedAt_ASC
  publishedAt_DESC
  releaseAt_ASC
  releaseAt_DESC
  status_ASC
  status_DESC
  title_ASC
  title_DESC
  updatedAt_ASC
  updatedAt_DESC
}

"""System Scheduled Release Status"""
enum ScheduledReleaseStatus {
  COMPLETED
  FAILED
  IN_PROGRESS
  PENDING
}

input ScheduledReleaseUpdateInput {
  description: String
  errorMessage: String
  isActive: Boolean
  releaseAt: DateTime
  title: String
}

"""Identifies documents"""
input ScheduledReleaseWhereInput {
  """Logical AND on all given filters."""
  AND: [ScheduledReleaseWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ScheduledReleaseWhereInput!]

  """Logical OR on all given filters."""
  OR: [ScheduledReleaseWhereInput!]

  """Contains search across all appropriate fields."""
  _search: String
  createdAt: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  createdAt_not: DateTime

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime]
  createdBy: UserWhereInput
  description: String

  """All values containing the given string."""
  description_contains: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values that are contained in given list."""
  description_in: [String]

  """Any other value that exists and is not equal to the given value."""
  description_not: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values not ending with the given string"""
  description_not_ends_with: String

  """All values that are not contained in given list."""
  description_not_in: [String]

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values starting with the given string."""
  description_starts_with: String
  errorMessage: String

  """All values containing the given string."""
  errorMessage_contains: String

  """All values ending with the given string."""
  errorMessage_ends_with: String

  """All values that are contained in given list."""
  errorMessage_in: [String]

  """Any other value that exists and is not equal to the given value."""
  errorMessage_not: String

  """All values not containing the given string."""
  errorMessage_not_contains: String

  """All values not ending with the given string"""
  errorMessage_not_ends_with: String

  """All values that are not contained in given list."""
  errorMessage_not_in: [String]

  """All values not starting with the given string."""
  errorMessage_not_starts_with: String

  """All values starting with the given string."""
  errorMessage_starts_with: String
  id: ID

  """All values containing the given string."""
  id_contains: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values that are contained in given list."""
  id_in: [ID]

  """Any other value that exists and is not equal to the given value."""
  id_not: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID

  """All values that are not contained in given list."""
  id_not_in: [ID]

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values starting with the given string."""
  id_starts_with: ID
  isActive: Boolean

  """Any other value that exists and is not equal to the given value."""
  isActive_not: Boolean
  isImplicit: Boolean

  """Any other value that exists and is not equal to the given value."""
  isImplicit_not: Boolean
  operations_every: ScheduledOperationWhereInput
  operations_none: ScheduledOperationWhereInput
  operations_some: ScheduledOperationWhereInput
  publishedAt: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  publishedAt_not: DateTime

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime]
  publishedBy: UserWhereInput
  releaseAt: DateTime

  """All values greater than the given value."""
  releaseAt_gt: DateTime

  """All values greater than or equal the given value."""
  releaseAt_gte: DateTime

  """All values that are contained in given list."""
  releaseAt_in: [DateTime]

  """All values less than the given value."""
  releaseAt_lt: DateTime

  """All values less than or equal the given value."""
  releaseAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  releaseAt_not: DateTime

  """All values that are not contained in given list."""
  releaseAt_not_in: [DateTime]
  status: ScheduledReleaseStatus

  """All values that are contained in given list."""
  status_in: [ScheduledReleaseStatus]

  """Any other value that exists and is not equal to the given value."""
  status_not: ScheduledReleaseStatus

  """All values that are not contained in given list."""
  status_not_in: [ScheduledReleaseStatus]
  title: String

  """All values containing the given string."""
  title_contains: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values that are contained in given list."""
  title_in: [String]

  """Any other value that exists and is not equal to the given value."""
  title_not: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values not ending with the given string"""
  title_not_ends_with: String

  """All values that are not contained in given list."""
  title_not_in: [String]

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values starting with the given string."""
  title_starts_with: String
  updatedAt: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  updatedAt_not: DateTime

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime]
  updatedBy: UserWhereInput
}

"""References ScheduledRelease record uniquely"""
input ScheduledReleaseWhereUniqueInput {
  id: ID
}

"""Stage system enumeration"""
enum Stage {
  """The Draft is the default stage for all your content."""
  DRAFT

  """The Published stage is where you can publish your content to."""
  PUBLISHED
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

enum SystemDateTimeFieldVariation {
  BASE
  COMBINED
  LOCALIZATION
}

"""User system model"""
type User implements Node {
  """The time the document was created"""
  createdAt: DateTime!

  """Get the document in other stages"""
  documentInStages(
    """Decides if the current stage should be included or not"""
    includeCurrent: Boolean! = false

    """
    Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree
    """
    inheritLocale: Boolean! = false

    """Potential stages that should be returned"""
    stages: [Stage!]! = [DRAFT, PUBLISHED]
  ): [User!]!

  """The unique identifier"""
  id: ID!

  """Flag to determine if user is active or not"""
  isActive: Boolean!

  """User Kind. Can be either MEMBER, PAT or PUBLIC"""
  kind: UserKind!

  """The username"""
  name: String!

  """Profile Picture url"""
  picture: String

  """The time the document was published. Null on documents in draft stage."""
  publishedAt: DateTime

  """System stage field"""
  stage: Stage!

  """The time the document was updated"""
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type UserConnection {
  aggregate: Aggregate!

  """A list of edges."""
  edges: [UserEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type UserEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: User!
}

"""System User Kind"""
enum UserKind {
  APP_TOKEN
  MEMBER
  PAT
  PUBLIC
  WEBHOOK
}

enum UserOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  isActive_ASC
  isActive_DESC
  kind_ASC
  kind_DESC
  name_ASC
  name_DESC
  picture_ASC
  picture_DESC
  publishedAt_ASC
  publishedAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

"""
This contains a set of filters that can be used to compare values internally
"""
input UserWhereComparatorInput {
  """
  This field can be used to request to check if the entry is outdated by internal comparison
  """
  outdated_to: Boolean
}

"""Identifies documents"""
input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Contains search across all appropriate fields."""
  _search: String
  createdAt: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  createdAt_not: DateTime

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime]
  documentInStages_every: UserWhereStageInput
  documentInStages_none: UserWhereStageInput
  documentInStages_some: UserWhereStageInput
  id: ID

  """All values containing the given string."""
  id_contains: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values that are contained in given list."""
  id_in: [ID]

  """Any other value that exists and is not equal to the given value."""
  id_not: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values not ending with the given string"""
  id_not_ends_with: ID

  """All values that are not contained in given list."""
  id_not_in: [ID]

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values starting with the given string."""
  id_starts_with: ID
  isActive: Boolean

  """Any other value that exists and is not equal to the given value."""
  isActive_not: Boolean
  kind: UserKind

  """All values that are contained in given list."""
  kind_in: [UserKind]

  """Any other value that exists and is not equal to the given value."""
  kind_not: UserKind

  """All values that are not contained in given list."""
  kind_not_in: [UserKind]
  name: String

  """All values containing the given string."""
  name_contains: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values that are contained in given list."""
  name_in: [String]

  """Any other value that exists and is not equal to the given value."""
  name_not: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values not ending with the given string"""
  name_not_ends_with: String

  """All values that are not contained in given list."""
  name_not_in: [String]

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values starting with the given string."""
  name_starts_with: String
  picture: String

  """All values containing the given string."""
  picture_contains: String

  """All values ending with the given string."""
  picture_ends_with: String

  """All values that are contained in given list."""
  picture_in: [String]

  """Any other value that exists and is not equal to the given value."""
  picture_not: String

  """All values not containing the given string."""
  picture_not_contains: String

  """All values not ending with the given string"""
  picture_not_ends_with: String

  """All values that are not contained in given list."""
  picture_not_in: [String]

  """All values not starting with the given string."""
  picture_not_starts_with: String

  """All values starting with the given string."""
  picture_starts_with: String
  publishedAt: DateTime

  """All values greater than the given value."""
  publishedAt_gt: DateTime

  """All values greater than or equal the given value."""
  publishedAt_gte: DateTime

  """All values that are contained in given list."""
  publishedAt_in: [DateTime]

  """All values less than the given value."""
  publishedAt_lt: DateTime

  """All values less than or equal the given value."""
  publishedAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  publishedAt_not: DateTime

  """All values that are not contained in given list."""
  publishedAt_not_in: [DateTime]
  updatedAt: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """Any other value that exists and is not equal to the given value."""
  updatedAt_not: DateTime

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime]
}

"""
The document in stages filter allows specifying a stage entry to cross compare the same document between different stages
"""
input UserWhereStageInput {
  """Logical AND on all given filters."""
  AND: [UserWhereStageInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereStageInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereStageInput!]

  """
  This field contains fields which can be set as true or false to specify an internal comparison
  """
  compareWithParent: UserWhereComparatorInput

  """Specify the stage to compare with"""
  stage: Stage
}

"""References User record uniquely"""
input UserWhereUniqueInput {
  id: ID
}

type Version {
  createdAt: DateTime!
  id: ID!
  revision: Int!
  stage: Stage!
}

input VersionWhereInput {
  id: ID!
  revision: Int!
  stage: Stage!
}

"""
An account can represent an user or organizer. It store essential informations and is used as the root class for relationships with other tables
"""
type account {
  address: String!
  created_at: timestamptz
  email: String
  emailVerified: Boolean!
  id: uuid!
  isOrganizer: Boolean!
  organizer(
    """
    Defines which locales should be returned.
    
    Note that `Organizer` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
    stage: Stage! = PUBLISHED
    where: OrganizerWhereUniqueInput_remote_rel_accountorganizer!
  ): Organizer
  organizerId: String
  updated_at: timestamptz
}

"""
aggregated selection of "account"
"""
type account_aggregate {
  aggregate: account_aggregate_fields
  nodes: [account!]!
}

"""
aggregate fields of "account"
"""
type account_aggregate_fields {
  count(columns: [account_select_column!], distinct: Boolean): Int!
  max: account_max_fields
  min: account_min_fields
}

"""
Boolean expression to filter rows from the table "account". All fields are combined with a logical 'AND'.
"""
input account_bool_exp {
  _and: [account_bool_exp!]
  _not: account_bool_exp
  _or: [account_bool_exp!]
  address: String_comparison_exp
  created_at: timestamptz_comparison_exp
  email: String_comparison_exp
  emailVerified: Boolean_comparison_exp
  id: uuid_comparison_exp
  isOrganizer: Boolean_comparison_exp
  organizerId: String_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "account"
"""
enum account_constraint {
  """
  unique or primary key constraint on columns "address"
  """
  account_address_key

  """
  unique or primary key constraint on columns "id"
  """
  account_pkey
}

"""
input type for inserting data into table "account"
"""
input account_insert_input {
  address: String
  created_at: timestamptz
  email: String
  emailVerified: Boolean
  id: uuid
  isOrganizer: Boolean
  organizerId: String
  updated_at: timestamptz
}

"""aggregate max on columns"""
type account_max_fields {
  address: String
  created_at: timestamptz
  email: String
  id: uuid
  organizerId: String
  updated_at: timestamptz
}

"""aggregate min on columns"""
type account_min_fields {
  address: String
  created_at: timestamptz
  email: String
  id: uuid
  organizerId: String
  updated_at: timestamptz
}

"""
response of any mutation on the table "account"
"""
type account_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [account!]!
}

"""
input type for inserting object relation for remote table "account"
"""
input account_obj_rel_insert_input {
  data: account_insert_input!

  """upsert condition"""
  on_conflict: account_on_conflict
}

"""
on_conflict condition type for table "account"
"""
input account_on_conflict {
  constraint: account_constraint!
  update_columns: [account_update_column!]! = []
  where: account_bool_exp
}

"""Ordering options when selecting data from "account"."""
input account_order_by {
  address: order_by
  created_at: order_by
  email: order_by
  emailVerified: order_by
  id: order_by
  isOrganizer: order_by
  organizerId: order_by
  updated_at: order_by
}

"""primary key columns input for table: account"""
input account_pk_columns_input {
  id: uuid!
}

"""
select columns of table "account"
"""
enum account_select_column {
  """column name"""
  address

  """column name"""
  created_at

  """column name"""
  email

  """column name"""
  emailVerified

  """column name"""
  id

  """column name"""
  isOrganizer

  """column name"""
  organizerId

  """column name"""
  updated_at
}

"""
input type for updating data in table "account"
"""
input account_set_input {
  address: String
  created_at: timestamptz
  email: String
  emailVerified: Boolean
  id: uuid
  isOrganizer: Boolean
  organizerId: String
  updated_at: timestamptz
}

"""
Streaming cursor of the table "account"
"""
input account_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: account_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input account_stream_cursor_value_input {
  address: String
  created_at: timestamptz
  email: String
  emailVerified: Boolean
  id: uuid
  isOrganizer: Boolean
  organizerId: String
  updated_at: timestamptz
}

"""
update columns of table "account"
"""
enum account_update_column {
  """column name"""
  address

  """column name"""
  created_at

  """column name"""
  email

  """column name"""
  emailVerified

  """column name"""
  id

  """column name"""
  isOrganizer

  """column name"""
  organizerId

  """column name"""
  updated_at
}

input account_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: account_set_input

  """filter the rows which have to be updated"""
  where: account_bool_exp!
}

"""
Currencies code following the standard ISO 4217 (https://en.wikipedia.org/wiki/ISO_4217)
"""
type currency {
  value: String!
}

"""
aggregated selection of "currency"
"""
type currency_aggregate {
  aggregate: currency_aggregate_fields
  nodes: [currency!]!
}

"""
aggregate fields of "currency"
"""
type currency_aggregate_fields {
  count(columns: [currency_select_column!], distinct: Boolean): Int!
  max: currency_max_fields
  min: currency_min_fields
}

"""
Boolean expression to filter rows from the table "currency". All fields are combined with a logical 'AND'.
"""
input currency_bool_exp {
  _and: [currency_bool_exp!]
  _not: currency_bool_exp
  _or: [currency_bool_exp!]
  value: String_comparison_exp
}

"""
unique or primary key constraints on table "currency"
"""
enum currency_constraint {
  """
  unique or primary key constraint on columns "value"
  """
  currency_pkey
}

enum currency_enum {
  AED
  CNY
  EUR
  GBP
  QAR
  SGD
  USD
}

"""
Boolean expression to compare columns of type "currency_enum". All fields are combined with logical 'AND'.
"""
input currency_enum_comparison_exp {
  _eq: currency_enum
  _in: [currency_enum!]
  _is_null: Boolean
  _neq: currency_enum
  _nin: [currency_enum!]
}

"""
input type for inserting data into table "currency"
"""
input currency_insert_input {
  value: String
}

"""aggregate max on columns"""
type currency_max_fields {
  value: String
}

"""aggregate min on columns"""
type currency_min_fields {
  value: String
}

"""
response of any mutation on the table "currency"
"""
type currency_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [currency!]!
}

"""
on_conflict condition type for table "currency"
"""
input currency_on_conflict {
  constraint: currency_constraint!
  update_columns: [currency_update_column!]! = []
  where: currency_bool_exp
}

"""Ordering options when selecting data from "currency"."""
input currency_order_by {
  value: order_by
}

"""primary key columns input for table: currency"""
input currency_pk_columns_input {
  value: String!
}

"""
select columns of table "currency"
"""
enum currency_select_column {
  """column name"""
  value
}

"""
input type for updating data in table "currency"
"""
input currency_set_input {
  value: String
}

"""
Streaming cursor of the table "currency"
"""
input currency_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: currency_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input currency_stream_cursor_value_input {
  value: String
}

"""
update columns of table "currency"
"""
enum currency_update_column {
  """column name"""
  value
}

input currency_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: currency_set_input

  """filter the rows which have to be updated"""
  where: currency_bool_exp!
}

"""ordering argument of a cursor"""
enum cursor_ordering {
  """ascending ordering of the cursor"""
  ASC

  """descending ordering of the cursor"""
  DESC
}

"""
Order with as quantity for Event Pass (linked to Hygraph model EventPass) and associated to an Account
"""
type eventPassOrder {
  """An object relationship"""
  account: account
  accountId: uuid!
  created_at: timestamptz!
  eventPass(
    """
    Defines which locales should be returned.
    
    Note that `EventPass` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
    stage: Stage! = PUBLISHED
  ): EventPass
  eventPassId: String!

  """An object relationship"""
  eventPassPricing: eventPassPricing
  id: uuid!
  quantity: Int!
  status: orderStatus_enum!
  updated_at: timestamptz!
}

"""Hold the sums for the Event Pass Orders"""
type eventPassOrderSums {
  eventPassId: String!
  totalReserved: Int!
}

"""
aggregated selection of "eventPassOrderSums"
"""
type eventPassOrderSums_aggregate {
  aggregate: eventPassOrderSums_aggregate_fields
  nodes: [eventPassOrderSums!]!
}

"""
aggregate fields of "eventPassOrderSums"
"""
type eventPassOrderSums_aggregate_fields {
  avg: eventPassOrderSums_avg_fields
  count(columns: [eventPassOrderSums_select_column!], distinct: Boolean): Int!
  max: eventPassOrderSums_max_fields
  min: eventPassOrderSums_min_fields
  stddev: eventPassOrderSums_stddev_fields
  stddev_pop: eventPassOrderSums_stddev_pop_fields
  stddev_samp: eventPassOrderSums_stddev_samp_fields
  sum: eventPassOrderSums_sum_fields
  var_pop: eventPassOrderSums_var_pop_fields
  var_samp: eventPassOrderSums_var_samp_fields
  variance: eventPassOrderSums_variance_fields
}

"""aggregate avg on columns"""
type eventPassOrderSums_avg_fields {
  totalReserved: Float
}

"""
Boolean expression to filter rows from the table "eventPassOrderSums". All fields are combined with a logical 'AND'.
"""
input eventPassOrderSums_bool_exp {
  _and: [eventPassOrderSums_bool_exp!]
  _not: eventPassOrderSums_bool_exp
  _or: [eventPassOrderSums_bool_exp!]
  eventPassId: String_comparison_exp
  totalReserved: Int_comparison_exp
}

"""
unique or primary key constraints on table "eventPassOrderSums"
"""
enum eventPassOrderSums_constraint {
  """
  unique or primary key constraint on columns "eventPassId"
  """
  eventPassOrderSums_pkey
}

"""
input type for incrementing numeric columns in table "eventPassOrderSums"
"""
input eventPassOrderSums_inc_input {
  totalReserved: Int
}

"""
input type for inserting data into table "eventPassOrderSums"
"""
input eventPassOrderSums_insert_input {
  eventPassId: String
  totalReserved: Int
}

"""aggregate max on columns"""
type eventPassOrderSums_max_fields {
  eventPassId: String
  totalReserved: Int
}

"""aggregate min on columns"""
type eventPassOrderSums_min_fields {
  eventPassId: String
  totalReserved: Int
}

"""
response of any mutation on the table "eventPassOrderSums"
"""
type eventPassOrderSums_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [eventPassOrderSums!]!
}

"""
on_conflict condition type for table "eventPassOrderSums"
"""
input eventPassOrderSums_on_conflict {
  constraint: eventPassOrderSums_constraint!
  update_columns: [eventPassOrderSums_update_column!]! = []
  where: eventPassOrderSums_bool_exp
}

"""Ordering options when selecting data from "eventPassOrderSums"."""
input eventPassOrderSums_order_by {
  eventPassId: order_by
  totalReserved: order_by
}

"""primary key columns input for table: eventPassOrderSums"""
input eventPassOrderSums_pk_columns_input {
  eventPassId: String!
}

"""
select columns of table "eventPassOrderSums"
"""
enum eventPassOrderSums_select_column {
  """column name"""
  eventPassId

  """column name"""
  totalReserved
}

"""
input type for updating data in table "eventPassOrderSums"
"""
input eventPassOrderSums_set_input {
  eventPassId: String
  totalReserved: Int
}

"""aggregate stddev on columns"""
type eventPassOrderSums_stddev_fields {
  totalReserved: Float
}

"""aggregate stddev_pop on columns"""
type eventPassOrderSums_stddev_pop_fields {
  totalReserved: Float
}

"""aggregate stddev_samp on columns"""
type eventPassOrderSums_stddev_samp_fields {
  totalReserved: Float
}

"""
Streaming cursor of the table "eventPassOrderSums"
"""
input eventPassOrderSums_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: eventPassOrderSums_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input eventPassOrderSums_stream_cursor_value_input {
  eventPassId: String
  totalReserved: Int
}

"""aggregate sum on columns"""
type eventPassOrderSums_sum_fields {
  totalReserved: Int
}

"""
update columns of table "eventPassOrderSums"
"""
enum eventPassOrderSums_update_column {
  """column name"""
  eventPassId

  """column name"""
  totalReserved
}

input eventPassOrderSums_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: eventPassOrderSums_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: eventPassOrderSums_set_input

  """filter the rows which have to be updated"""
  where: eventPassOrderSums_bool_exp!
}

"""aggregate var_pop on columns"""
type eventPassOrderSums_var_pop_fields {
  totalReserved: Float
}

"""aggregate var_samp on columns"""
type eventPassOrderSums_var_samp_fields {
  totalReserved: Float
}

"""aggregate variance on columns"""
type eventPassOrderSums_variance_fields {
  totalReserved: Float
}

"""
aggregated selection of "eventPassOrder"
"""
type eventPassOrder_aggregate {
  aggregate: eventPassOrder_aggregate_fields
  nodes: [eventPassOrder!]!
}

"""
aggregate fields of "eventPassOrder"
"""
type eventPassOrder_aggregate_fields {
  avg: eventPassOrder_avg_fields
  count(columns: [eventPassOrder_select_column!], distinct: Boolean): Int!
  max: eventPassOrder_max_fields
  min: eventPassOrder_min_fields
  stddev: eventPassOrder_stddev_fields
  stddev_pop: eventPassOrder_stddev_pop_fields
  stddev_samp: eventPassOrder_stddev_samp_fields
  sum: eventPassOrder_sum_fields
  var_pop: eventPassOrder_var_pop_fields
  var_samp: eventPassOrder_var_samp_fields
  variance: eventPassOrder_variance_fields
}

"""aggregate avg on columns"""
type eventPassOrder_avg_fields {
  quantity: Float
}

"""
Boolean expression to filter rows from the table "eventPassOrder". All fields are combined with a logical 'AND'.
"""
input eventPassOrder_bool_exp {
  _and: [eventPassOrder_bool_exp!]
  _not: eventPassOrder_bool_exp
  _or: [eventPassOrder_bool_exp!]
  account: account_bool_exp
  accountId: uuid_comparison_exp
  created_at: timestamptz_comparison_exp
  eventPassId: String_comparison_exp
  eventPassPricing: eventPassPricing_bool_exp
  id: uuid_comparison_exp
  quantity: Int_comparison_exp
  status: orderStatus_enum_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "eventPassOrder"
"""
enum eventPassOrder_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  eventPassOrder_pkey
}

"""
input type for incrementing numeric columns in table "eventPassOrder"
"""
input eventPassOrder_inc_input {
  quantity: Int
}

"""
input type for inserting data into table "eventPassOrder"
"""
input eventPassOrder_insert_input {
  account: account_obj_rel_insert_input
  accountId: uuid
  created_at: timestamptz
  eventPassId: String
  eventPassPricing: eventPassPricing_obj_rel_insert_input
  id: uuid
  quantity: Int
  status: orderStatus_enum
  updated_at: timestamptz
}

"""aggregate max on columns"""
type eventPassOrder_max_fields {
  accountId: uuid
  created_at: timestamptz
  eventPassId: String
  id: uuid
  quantity: Int
  updated_at: timestamptz
}

"""aggregate min on columns"""
type eventPassOrder_min_fields {
  accountId: uuid
  created_at: timestamptz
  eventPassId: String
  id: uuid
  quantity: Int
  updated_at: timestamptz
}

"""
response of any mutation on the table "eventPassOrder"
"""
type eventPassOrder_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [eventPassOrder!]!
}

"""
on_conflict condition type for table "eventPassOrder"
"""
input eventPassOrder_on_conflict {
  constraint: eventPassOrder_constraint!
  update_columns: [eventPassOrder_update_column!]! = []
  where: eventPassOrder_bool_exp
}

"""Ordering options when selecting data from "eventPassOrder"."""
input eventPassOrder_order_by {
  account: account_order_by
  accountId: order_by
  created_at: order_by
  eventPassId: order_by
  eventPassPricing: eventPassPricing_order_by
  id: order_by
  quantity: order_by
  status: order_by
  updated_at: order_by
}

"""primary key columns input for table: eventPassOrder"""
input eventPassOrder_pk_columns_input {
  id: uuid!
}

"""
select columns of table "eventPassOrder"
"""
enum eventPassOrder_select_column {
  """column name"""
  accountId

  """column name"""
  created_at

  """column name"""
  eventPassId

  """column name"""
  id

  """column name"""
  quantity

  """column name"""
  status

  """column name"""
  updated_at
}

"""
input type for updating data in table "eventPassOrder"
"""
input eventPassOrder_set_input {
  accountId: uuid
  created_at: timestamptz
  eventPassId: String
  id: uuid
  quantity: Int
  status: orderStatus_enum
  updated_at: timestamptz
}

"""aggregate stddev on columns"""
type eventPassOrder_stddev_fields {
  quantity: Float
}

"""aggregate stddev_pop on columns"""
type eventPassOrder_stddev_pop_fields {
  quantity: Float
}

"""aggregate stddev_samp on columns"""
type eventPassOrder_stddev_samp_fields {
  quantity: Float
}

"""
Streaming cursor of the table "eventPassOrder"
"""
input eventPassOrder_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: eventPassOrder_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input eventPassOrder_stream_cursor_value_input {
  accountId: uuid
  created_at: timestamptz
  eventPassId: String
  id: uuid
  quantity: Int
  status: orderStatus_enum
  updated_at: timestamptz
}

"""aggregate sum on columns"""
type eventPassOrder_sum_fields {
  quantity: Int
}

"""
update columns of table "eventPassOrder"
"""
enum eventPassOrder_update_column {
  """column name"""
  accountId

  """column name"""
  created_at

  """column name"""
  eventPassId

  """column name"""
  id

  """column name"""
  quantity

  """column name"""
  status

  """column name"""
  updated_at
}

input eventPassOrder_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: eventPassOrder_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: eventPassOrder_set_input

  """filter the rows which have to be updated"""
  where: eventPassOrder_bool_exp!
}

"""aggregate var_pop on columns"""
type eventPassOrder_var_pop_fields {
  quantity: Float
}

"""aggregate var_samp on columns"""
type eventPassOrder_var_samp_fields {
  quantity: Float
}

"""aggregate variance on columns"""
type eventPassOrder_variance_fields {
  quantity: Float
}

"""
The EventPassPricing table stores pricing information related to each Event Pass. It includes the price amount, the currency in which the price is denoted, and the maximum quantity that can be ordered both overall and per user. Each row in the table represents a unique combination of these attributes for a specific Event Pass. This table is key in managing the sales and availability of Event Passes.
"""
type eventPassPricing {
  created_at: timestamptz!
  eventPassId: String!
  id: uuid!
  maxAmount: Int!
  maxAmountPerUser: Int
  priceAmount: Int!
  priceCurrency: currency_enum!
  updated_at: timestamptz!
}

"""
aggregated selection of "eventPassPricing"
"""
type eventPassPricing_aggregate {
  aggregate: eventPassPricing_aggregate_fields
  nodes: [eventPassPricing!]!
}

"""
aggregate fields of "eventPassPricing"
"""
type eventPassPricing_aggregate_fields {
  avg: eventPassPricing_avg_fields
  count(columns: [eventPassPricing_select_column!], distinct: Boolean): Int!
  max: eventPassPricing_max_fields
  min: eventPassPricing_min_fields
  stddev: eventPassPricing_stddev_fields
  stddev_pop: eventPassPricing_stddev_pop_fields
  stddev_samp: eventPassPricing_stddev_samp_fields
  sum: eventPassPricing_sum_fields
  var_pop: eventPassPricing_var_pop_fields
  var_samp: eventPassPricing_var_samp_fields
  variance: eventPassPricing_variance_fields
}

"""aggregate avg on columns"""
type eventPassPricing_avg_fields {
  maxAmount: Float
  maxAmountPerUser: Float
  priceAmount: Float
}

"""
Boolean expression to filter rows from the table "eventPassPricing". All fields are combined with a logical 'AND'.
"""
input eventPassPricing_bool_exp {
  _and: [eventPassPricing_bool_exp!]
  _not: eventPassPricing_bool_exp
  _or: [eventPassPricing_bool_exp!]
  created_at: timestamptz_comparison_exp
  eventPassId: String_comparison_exp
  id: uuid_comparison_exp
  maxAmount: Int_comparison_exp
  maxAmountPerUser: Int_comparison_exp
  priceAmount: Int_comparison_exp
  priceCurrency: currency_enum_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "eventPassPricing"
"""
enum eventPassPricing_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  eventPassPricing_pkey
}

"""
input type for incrementing numeric columns in table "eventPassPricing"
"""
input eventPassPricing_inc_input {
  maxAmount: Int
  maxAmountPerUser: Int
  priceAmount: Int
}

"""
input type for inserting data into table "eventPassPricing"
"""
input eventPassPricing_insert_input {
  created_at: timestamptz
  eventPassId: String
  id: uuid
  maxAmount: Int
  maxAmountPerUser: Int
  priceAmount: Int
  priceCurrency: currency_enum
  updated_at: timestamptz
}

"""aggregate max on columns"""
type eventPassPricing_max_fields {
  created_at: timestamptz
  eventPassId: String
  id: uuid
  maxAmount: Int
  maxAmountPerUser: Int
  priceAmount: Int
  updated_at: timestamptz
}

"""aggregate min on columns"""
type eventPassPricing_min_fields {
  created_at: timestamptz
  eventPassId: String
  id: uuid
  maxAmount: Int
  maxAmountPerUser: Int
  priceAmount: Int
  updated_at: timestamptz
}

"""
response of any mutation on the table "eventPassPricing"
"""
type eventPassPricing_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [eventPassPricing!]!
}

"""
input type for inserting object relation for remote table "eventPassPricing"
"""
input eventPassPricing_obj_rel_insert_input {
  data: eventPassPricing_insert_input!

  """upsert condition"""
  on_conflict: eventPassPricing_on_conflict
}

"""
on_conflict condition type for table "eventPassPricing"
"""
input eventPassPricing_on_conflict {
  constraint: eventPassPricing_constraint!
  update_columns: [eventPassPricing_update_column!]! = []
  where: eventPassPricing_bool_exp
}

"""Ordering options when selecting data from "eventPassPricing"."""
input eventPassPricing_order_by {
  created_at: order_by
  eventPassId: order_by
  id: order_by
  maxAmount: order_by
  maxAmountPerUser: order_by
  priceAmount: order_by
  priceCurrency: order_by
  updated_at: order_by
}

"""primary key columns input for table: eventPassPricing"""
input eventPassPricing_pk_columns_input {
  id: uuid!
}

"""
select columns of table "eventPassPricing"
"""
enum eventPassPricing_select_column {
  """column name"""
  created_at

  """column name"""
  eventPassId

  """column name"""
  id

  """column name"""
  maxAmount

  """column name"""
  maxAmountPerUser

  """column name"""
  priceAmount

  """column name"""
  priceCurrency

  """column name"""
  updated_at
}

"""
input type for updating data in table "eventPassPricing"
"""
input eventPassPricing_set_input {
  created_at: timestamptz
  eventPassId: String
  id: uuid
  maxAmount: Int
  maxAmountPerUser: Int
  priceAmount: Int
  priceCurrency: currency_enum
  updated_at: timestamptz
}

"""aggregate stddev on columns"""
type eventPassPricing_stddev_fields {
  maxAmount: Float
  maxAmountPerUser: Float
  priceAmount: Float
}

"""aggregate stddev_pop on columns"""
type eventPassPricing_stddev_pop_fields {
  maxAmount: Float
  maxAmountPerUser: Float
  priceAmount: Float
}

"""aggregate stddev_samp on columns"""
type eventPassPricing_stddev_samp_fields {
  maxAmount: Float
  maxAmountPerUser: Float
  priceAmount: Float
}

"""
Streaming cursor of the table "eventPassPricing"
"""
input eventPassPricing_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: eventPassPricing_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input eventPassPricing_stream_cursor_value_input {
  created_at: timestamptz
  eventPassId: String
  id: uuid
  maxAmount: Int
  maxAmountPerUser: Int
  priceAmount: Int
  priceCurrency: currency_enum
  updated_at: timestamptz
}

"""aggregate sum on columns"""
type eventPassPricing_sum_fields {
  maxAmount: Int
  maxAmountPerUser: Int
  priceAmount: Int
}

"""
update columns of table "eventPassPricing"
"""
enum eventPassPricing_update_column {
  """column name"""
  created_at

  """column name"""
  eventPassId

  """column name"""
  id

  """column name"""
  maxAmount

  """column name"""
  maxAmountPerUser

  """column name"""
  priceAmount

  """column name"""
  priceCurrency

  """column name"""
  updated_at
}

input eventPassPricing_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: eventPassPricing_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: eventPassPricing_set_input

  """filter the rows which have to be updated"""
  where: eventPassPricing_bool_exp!
}

"""aggregate var_pop on columns"""
type eventPassPricing_var_pop_fields {
  maxAmount: Float
  maxAmountPerUser: Float
  priceAmount: Float
}

"""aggregate var_samp on columns"""
type eventPassPricing_var_samp_fields {
  maxAmount: Float
  maxAmountPerUser: Float
  priceAmount: Float
}

"""aggregate variance on columns"""
type eventPassPricing_variance_fields {
  maxAmount: Float
  maxAmountPerUser: Float
  priceAmount: Float
}

"""mutation root"""
type mutation_root {
  """Create one asset"""
  createAsset(data: AssetCreateInput!): Asset

  """Create one event"""
  createEvent(data: EventCreateInput!): Event

  """Create one eventPass"""
  createEventPass(data: EventPassCreateInput!): EventPass

  """Create one organizer"""
  createOrganizer(data: OrganizerCreateInput!): Organizer

  """Create one scheduledRelease"""
  createScheduledRelease(data: ScheduledReleaseCreateInput!): ScheduledRelease

  """Delete one asset from _all_ existing stages. Returns deleted document."""
  deleteAsset(
    """Document to delete"""
    where: AssetWhereUniqueInput!
  ): Asset

  """Delete one event from _all_ existing stages. Returns deleted document."""
  deleteEvent(
    """Document to delete"""
    where: EventWhereUniqueInput!
  ): Event

  """
  Delete one eventPass from _all_ existing stages. Returns deleted document.
  """
  deleteEventPass(
    """Document to delete"""
    where: EventPassWhereUniqueInput!
  ): EventPass

  """Delete many Asset documents"""
  deleteManyAssets(
    """Documents to delete"""
    where: AssetManyWhereInput
  ): BatchPayload!

  """Delete many Asset documents, return deleted documents"""
  deleteManyAssetsConnection(
    after: ID
    before: ID
    first: Int
    last: Int
    skip: Int

    """Documents to delete"""
    where: AssetManyWhereInput
  ): AssetConnection!

  """Delete many EventPass documents"""
  deleteManyEventPasses(
    """Documents to delete"""
    where: EventPassManyWhereInput
  ): BatchPayload!

  """Delete many EventPass documents, return deleted documents"""
  deleteManyEventPassesConnection(
    after: ID
    before: ID
    first: Int
    last: Int
    skip: Int

    """Documents to delete"""
    where: EventPassManyWhereInput
  ): EventPassConnection!

  """Delete many Event documents"""
  deleteManyEvents(
    """Documents to delete"""
    where: EventManyWhereInput
  ): BatchPayload!

  """Delete many Event documents, return deleted documents"""
  deleteManyEventsConnection(
    after: ID
    before: ID
    first: Int
    last: Int
    skip: Int

    """Documents to delete"""
    where: EventManyWhereInput
  ): EventConnection!

  """Delete many Organizer documents"""
  deleteManyOrganizers(
    """Documents to delete"""
    where: OrganizerManyWhereInput
  ): BatchPayload!

  """Delete many Organizer documents, return deleted documents"""
  deleteManyOrganizersConnection(
    after: ID
    before: ID
    first: Int
    last: Int
    skip: Int

    """Documents to delete"""
    where: OrganizerManyWhereInput
  ): OrganizerConnection!

  """
  Delete one organizer from _all_ existing stages. Returns deleted document.
  """
  deleteOrganizer(
    """Document to delete"""
    where: OrganizerWhereUniqueInput!
  ): Organizer

  """Delete and return scheduled operation"""
  deleteScheduledOperation(
    """Document to delete"""
    where: ScheduledOperationWhereUniqueInput!
  ): ScheduledOperation

  """
  Delete one scheduledRelease from _all_ existing stages. Returns deleted document.
  """
  deleteScheduledRelease(
    """Document to delete"""
    where: ScheduledReleaseWhereUniqueInput!
  ): ScheduledRelease

  """
  delete data from the table: "account"
  """
  delete_account(
    """filter the rows which have to be deleted"""
    where: account_bool_exp!
  ): account_mutation_response

  """
  delete single row from the table: "account"
  """
  delete_account_by_pk(id: uuid!): account

  """
  delete data from the table: "currency"
  """
  delete_currency(
    """filter the rows which have to be deleted"""
    where: currency_bool_exp!
  ): currency_mutation_response

  """
  delete single row from the table: "currency"
  """
  delete_currency_by_pk(value: String!): currency

  """
  delete data from the table: "eventPassOrder"
  """
  delete_eventPassOrder(
    """filter the rows which have to be deleted"""
    where: eventPassOrder_bool_exp!
  ): eventPassOrder_mutation_response

  """
  delete data from the table: "eventPassOrderSums"
  """
  delete_eventPassOrderSums(
    """filter the rows which have to be deleted"""
    where: eventPassOrderSums_bool_exp!
  ): eventPassOrderSums_mutation_response

  """
  delete single row from the table: "eventPassOrderSums"
  """
  delete_eventPassOrderSums_by_pk(eventPassId: String!): eventPassOrderSums

  """
  delete single row from the table: "eventPassOrder"
  """
  delete_eventPassOrder_by_pk(id: uuid!): eventPassOrder

  """
  delete data from the table: "eventPassPricing"
  """
  delete_eventPassPricing(
    """filter the rows which have to be deleted"""
    where: eventPassPricing_bool_exp!
  ): eventPassPricing_mutation_response

  """
  delete single row from the table: "eventPassPricing"
  """
  delete_eventPassPricing_by_pk(id: uuid!): eventPassPricing

  """
  delete data from the table: "orderStatus"
  """
  delete_orderStatus(
    """filter the rows which have to be deleted"""
    where: orderStatus_bool_exp!
  ): orderStatus_mutation_response

  """
  delete single row from the table: "orderStatus"
  """
  delete_orderStatus_by_pk(value: String!): orderStatus

  """
  insert data into the table: "account"
  """
  insert_account(
    """the rows to be inserted"""
    objects: [account_insert_input!]!

    """upsert condition"""
    on_conflict: account_on_conflict
  ): account_mutation_response

  """
  insert a single row into the table: "account"
  """
  insert_account_one(
    """the row to be inserted"""
    object: account_insert_input!

    """upsert condition"""
    on_conflict: account_on_conflict
  ): account

  """
  insert data into the table: "currency"
  """
  insert_currency(
    """the rows to be inserted"""
    objects: [currency_insert_input!]!

    """upsert condition"""
    on_conflict: currency_on_conflict
  ): currency_mutation_response

  """
  insert a single row into the table: "currency"
  """
  insert_currency_one(
    """the row to be inserted"""
    object: currency_insert_input!

    """upsert condition"""
    on_conflict: currency_on_conflict
  ): currency

  """
  insert data into the table: "eventPassOrder"
  """
  insert_eventPassOrder(
    """the rows to be inserted"""
    objects: [eventPassOrder_insert_input!]!

    """upsert condition"""
    on_conflict: eventPassOrder_on_conflict
  ): eventPassOrder_mutation_response

  """
  insert data into the table: "eventPassOrderSums"
  """
  insert_eventPassOrderSums(
    """the rows to be inserted"""
    objects: [eventPassOrderSums_insert_input!]!

    """upsert condition"""
    on_conflict: eventPassOrderSums_on_conflict
  ): eventPassOrderSums_mutation_response

  """
  insert a single row into the table: "eventPassOrderSums"
  """
  insert_eventPassOrderSums_one(
    """the row to be inserted"""
    object: eventPassOrderSums_insert_input!

    """upsert condition"""
    on_conflict: eventPassOrderSums_on_conflict
  ): eventPassOrderSums

  """
  insert a single row into the table: "eventPassOrder"
  """
  insert_eventPassOrder_one(
    """the row to be inserted"""
    object: eventPassOrder_insert_input!

    """upsert condition"""
    on_conflict: eventPassOrder_on_conflict
  ): eventPassOrder

  """
  insert data into the table: "eventPassPricing"
  """
  insert_eventPassPricing(
    """the rows to be inserted"""
    objects: [eventPassPricing_insert_input!]!

    """upsert condition"""
    on_conflict: eventPassPricing_on_conflict
  ): eventPassPricing_mutation_response

  """
  insert a single row into the table: "eventPassPricing"
  """
  insert_eventPassPricing_one(
    """the row to be inserted"""
    object: eventPassPricing_insert_input!

    """upsert condition"""
    on_conflict: eventPassPricing_on_conflict
  ): eventPassPricing

  """
  insert data into the table: "orderStatus"
  """
  insert_orderStatus(
    """the rows to be inserted"""
    objects: [orderStatus_insert_input!]!

    """upsert condition"""
    on_conflict: orderStatus_on_conflict
  ): orderStatus_mutation_response

  """
  insert a single row into the table: "orderStatus"
  """
  insert_orderStatus_one(
    """the row to be inserted"""
    object: orderStatus_insert_input!

    """upsert condition"""
    on_conflict: orderStatus_on_conflict
  ): orderStatus

  """Publish one asset"""
  publishAsset(
    """Optional localizations to publish"""
    locales: [Locale!]

    """Whether to publish the base document"""
    publishBase: Boolean = true

    """Publishing target stage"""
    to: [Stage!]! = [PUBLISHED]

    """Document to publish"""
    where: AssetWhereUniqueInput!

    """Whether to include the default locale when publishBase is set"""
    withDefaultLocale: Boolean = true
  ): Asset

  """Publish one event"""
  publishEvent(
    """Optional localizations to publish"""
    locales: [Locale!]

    """Whether to publish the base document"""
    publishBase: Boolean = true

    """Publishing target stage"""
    to: [Stage!]! = [PUBLISHED]

    """Document to publish"""
    where: EventWhereUniqueInput!

    """Whether to include the default locale when publishBase is set"""
    withDefaultLocale: Boolean = true
  ): Event

  """Publish one eventPass"""
  publishEventPass(
    """Optional localizations to publish"""
    locales: [Locale!]

    """Whether to publish the base document"""
    publishBase: Boolean = true

    """Publishing target stage"""
    to: [Stage!]! = [PUBLISHED]

    """Document to publish"""
    where: EventPassWhereUniqueInput!

    """Whether to include the default locale when publishBase is set"""
    withDefaultLocale: Boolean = true
  ): EventPass

  """Publish many Asset documents"""
  publishManyAssets(
    """Document localizations to publish"""
    locales: [Locale!]

    """Whether to publish the base document"""
    publishBase: Boolean = true

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]

    """Identifies documents in each stage to be published"""
    where: AssetManyWhereInput

    """Whether to include the default locale when publishBase is true"""
    withDefaultLocale: Boolean = true
  ): BatchPayload!

  """Publish many Asset documents"""
  publishManyAssetsConnection(
    after: ID
    before: ID
    first: Int

    """Stage to find matching documents in"""
    from: Stage = DRAFT
    last: Int

    """Document localizations to publish"""
    locales: [Locale!]

    """Whether to publish the base document"""
    publishBase: Boolean = true
    skip: Int

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]

    """Identifies documents in each stage to be published"""
    where: AssetManyWhereInput

    """Whether to include the default locale when publishBase is true"""
    withDefaultLocale: Boolean = true
  ): AssetConnection!

  """Publish many EventPass documents"""
  publishManyEventPasses(
    """Document localizations to publish"""
    locales: [Locale!]

    """Whether to publish the base document"""
    publishBase: Boolean = true

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]

    """Identifies documents in each stage to be published"""
    where: EventPassManyWhereInput

    """Whether to include the default locale when publishBase is true"""
    withDefaultLocale: Boolean = true
  ): BatchPayload!

  """Publish many EventPass documents"""
  publishManyEventPassesConnection(
    after: ID
    before: ID
    first: Int

    """Stage to find matching documents in"""
    from: Stage = DRAFT
    last: Int

    """Document localizations to publish"""
    locales: [Locale!]

    """Whether to publish the base document"""
    publishBase: Boolean = true
    skip: Int

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]

    """Identifies documents in each stage to be published"""
    where: EventPassManyWhereInput

    """Whether to include the default locale when publishBase is true"""
    withDefaultLocale: Boolean = true
  ): EventPassConnection!

  """Publish many Event documents"""
  publishManyEvents(
    """Document localizations to publish"""
    locales: [Locale!]

    """Whether to publish the base document"""
    publishBase: Boolean = true

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]

    """Identifies documents in each stage to be published"""
    where: EventManyWhereInput

    """Whether to include the default locale when publishBase is true"""
    withDefaultLocale: Boolean = true
  ): BatchPayload!

  """Publish many Event documents"""
  publishManyEventsConnection(
    after: ID
    before: ID
    first: Int

    """Stage to find matching documents in"""
    from: Stage = DRAFT
    last: Int

    """Document localizations to publish"""
    locales: [Locale!]

    """Whether to publish the base document"""
    publishBase: Boolean = true
    skip: Int

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]

    """Identifies documents in each stage to be published"""
    where: EventManyWhereInput

    """Whether to include the default locale when publishBase is true"""
    withDefaultLocale: Boolean = true
  ): EventConnection!

  """Publish many Organizer documents"""
  publishManyOrganizers(
    """Document localizations to publish"""
    locales: [Locale!]

    """Whether to publish the base document"""
    publishBase: Boolean = true

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]

    """Identifies documents in each stage to be published"""
    where: OrganizerManyWhereInput

    """Whether to include the default locale when publishBase is true"""
    withDefaultLocale: Boolean = true
  ): BatchPayload!

  """Publish many Organizer documents"""
  publishManyOrganizersConnection(
    after: ID
    before: ID
    first: Int

    """Stage to find matching documents in"""
    from: Stage = DRAFT
    last: Int

    """Document localizations to publish"""
    locales: [Locale!]

    """Whether to publish the base document"""
    publishBase: Boolean = true
    skip: Int

    """Stages to publish documents to"""
    to: [Stage!]! = [PUBLISHED]

    """Identifies documents in each stage to be published"""
    where: OrganizerManyWhereInput

    """Whether to include the default locale when publishBase is true"""
    withDefaultLocale: Boolean = true
  ): OrganizerConnection!

  """Publish one organizer"""
  publishOrganizer(
    """Optional localizations to publish"""
    locales: [Locale!]

    """Whether to publish the base document"""
    publishBase: Boolean = true

    """Publishing target stage"""
    to: [Stage!]! = [PUBLISHED]

    """Document to publish"""
    where: OrganizerWhereUniqueInput!

    """Whether to include the default locale when publishBase is set"""
    withDefaultLocale: Boolean = true
  ): Organizer

  """Schedule to publish one asset"""
  schedulePublishAsset(
    """Optional localizations to publish"""
    locales: [Locale!]

    """Whether to publish the base document"""
    publishBase: Boolean = true

    """
    Release at point in time, will create new release containing this operation
    """
    releaseAt: DateTime

    """Optionally attach this scheduled operation to an existing release"""
    releaseId: String

    """Publishing target stage"""
    to: [Stage!]! = [PUBLISHED]

    """Document to publish"""
    where: AssetWhereUniqueInput!

    """Whether to include the default locale when publishBase is set"""
    withDefaultLocale: Boolean = true
  ): Asset

  """Schedule to publish one event"""
  schedulePublishEvent(
    """Optional localizations to publish"""
    locales: [Locale!]

    """Whether to publish the base document"""
    publishBase: Boolean = true

    """
    Release at point in time, will create new release containing this operation
    """
    releaseAt: DateTime

    """Optionally attach this scheduled operation to an existing release"""
    releaseId: String

    """Publishing target stage"""
    to: [Stage!]! = [PUBLISHED]

    """Document to publish"""
    where: EventWhereUniqueInput!

    """Whether to include the default locale when publishBase is set"""
    withDefaultLocale: Boolean = true
  ): Event

  """Schedule to publish one eventPass"""
  schedulePublishEventPass(
    """Optional localizations to publish"""
    locales: [Locale!]

    """Whether to publish the base document"""
    publishBase: Boolean = true

    """
    Release at point in time, will create new release containing this operation
    """
    releaseAt: DateTime

    """Optionally attach this scheduled operation to an existing release"""
    releaseId: String

    """Publishing target stage"""
    to: [Stage!]! = [PUBLISHED]

    """Document to publish"""
    where: EventPassWhereUniqueInput!

    """Whether to include the default locale when publishBase is set"""
    withDefaultLocale: Boolean = true
  ): EventPass

  """Schedule to publish one organizer"""
  schedulePublishOrganizer(
    """Optional localizations to publish"""
    locales: [Locale!]

    """Whether to publish the base document"""
    publishBase: Boolean = true

    """
    Release at point in time, will create new release containing this operation
    """
    releaseAt: DateTime

    """Optionally attach this scheduled operation to an existing release"""
    releaseId: String

    """Publishing target stage"""
    to: [Stage!]! = [PUBLISHED]

    """Document to publish"""
    where: OrganizerWhereUniqueInput!

    """Whether to include the default locale when publishBase is set"""
    withDefaultLocale: Boolean = true
  ): Organizer

  """
  Unpublish one asset from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only.
  """
  scheduleUnpublishAsset(
    """Stages to unpublish document from"""
    from: [Stage!]! = [PUBLISHED]

    """
    Optional locales to unpublish. Unpublishing the default locale will completely remove the document from the selected stages
    """
    locales: [Locale!]

    """
    Release at point in time, will create new release containing this operation
    """
    releaseAt: DateTime

    """Optionally attach this scheduled operation to an existing release"""
    releaseId: String

    """
    Unpublish complete document including default localization and relations from stages. Can be disabled.
    """
    unpublishBase: Boolean = true

    """Document to unpublish"""
    where: AssetWhereUniqueInput!
  ): Asset

  """
  Unpublish one event from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only.
  """
  scheduleUnpublishEvent(
    """Stages to unpublish document from"""
    from: [Stage!]! = [PUBLISHED]

    """
    Optional locales to unpublish. Unpublishing the default locale will completely remove the document from the selected stages
    """
    locales: [Locale!]

    """
    Release at point in time, will create new release containing this operation
    """
    releaseAt: DateTime

    """Optionally attach this scheduled operation to an existing release"""
    releaseId: String

    """
    Unpublish complete document including default localization and relations from stages. Can be disabled.
    """
    unpublishBase: Boolean = true

    """Document to unpublish"""
    where: EventWhereUniqueInput!
  ): Event

  """
  Unpublish one eventPass from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only.
  """
  scheduleUnpublishEventPass(
    """Stages to unpublish document from"""
    from: [Stage!]! = [PUBLISHED]

    """
    Optional locales to unpublish. Unpublishing the default locale will completely remove the document from the selected stages
    """
    locales: [Locale!]

    """
    Release at point in time, will create new release containing this operation
    """
    releaseAt: DateTime

    """Optionally attach this scheduled operation to an existing release"""
    releaseId: String

    """
    Unpublish complete document including default localization and relations from stages. Can be disabled.
    """
    unpublishBase: Boolean = true

    """Document to unpublish"""
    where: EventPassWhereUniqueInput!
  ): EventPass

  """
  Unpublish one organizer from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only.
  """
  scheduleUnpublishOrganizer(
    """Stages to unpublish document from"""
    from: [Stage!]! = [PUBLISHED]

    """
    Optional locales to unpublish. Unpublishing the default locale will completely remove the document from the selected stages
    """
    locales: [Locale!]

    """
    Release at point in time, will create new release containing this operation
    """
    releaseAt: DateTime

    """Optionally attach this scheduled operation to an existing release"""
    releaseId: String

    """
    Unpublish complete document including default localization and relations from stages. Can be disabled.
    """
    unpublishBase: Boolean = true

    """Document to unpublish"""
    where: OrganizerWhereUniqueInput!
  ): Organizer

  """
  Unpublish one asset from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only.
  """
  unpublishAsset(
    """Stages to unpublish document from"""
    from: [Stage!]! = [PUBLISHED]

    """
    Optional locales to unpublish. Unpublishing the default locale will completely remove the document from the selected stages
    """
    locales: [Locale!]

    """
    Unpublish complete document including default localization and relations from stages. Can be disabled.
    """
    unpublishBase: Boolean = true

    """Document to unpublish"""
    where: AssetWhereUniqueInput!
  ): Asset

  """
  Unpublish one event from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only.
  """
  unpublishEvent(
    """Stages to unpublish document from"""
    from: [Stage!]! = [PUBLISHED]

    """
    Optional locales to unpublish. Unpublishing the default locale will completely remove the document from the selected stages
    """
    locales: [Locale!]

    """
    Unpublish complete document including default localization and relations from stages. Can be disabled.
    """
    unpublishBase: Boolean = true

    """Document to unpublish"""
    where: EventWhereUniqueInput!
  ): Event

  """
  Unpublish one eventPass from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only.
  """
  unpublishEventPass(
    """Stages to unpublish document from"""
    from: [Stage!]! = [PUBLISHED]

    """
    Optional locales to unpublish. Unpublishing the default locale will completely remove the document from the selected stages
    """
    locales: [Locale!]

    """
    Unpublish complete document including default localization and relations from stages. Can be disabled.
    """
    unpublishBase: Boolean = true

    """Document to unpublish"""
    where: EventPassWhereUniqueInput!
  ): EventPass

  """Unpublish many Asset documents"""
  unpublishManyAssets(
    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]

    """Locales to unpublish"""
    locales: [Locale!]

    """Whether to unpublish the base document and default localization"""
    unpublishBase: Boolean = true

    """Identifies documents in each stage"""
    where: AssetManyWhereInput
  ): BatchPayload!

  """
  Find many Asset documents that match criteria in specified stage and unpublish from target stages
  """
  unpublishManyAssetsConnection(
    after: ID
    before: ID
    first: Int

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]
    last: Int

    """Locales to unpublish"""
    locales: [Locale!]
    skip: Int

    """Stage to find matching documents in"""
    stage: Stage = DRAFT

    """Whether to unpublish the base document and default localization"""
    unpublishBase: Boolean = true

    """Identifies documents in draft stage"""
    where: AssetManyWhereInput
  ): AssetConnection!

  """Unpublish many EventPass documents"""
  unpublishManyEventPasses(
    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]

    """Locales to unpublish"""
    locales: [Locale!]

    """Whether to unpublish the base document and default localization"""
    unpublishBase: Boolean = true

    """Identifies documents in each stage"""
    where: EventPassManyWhereInput
  ): BatchPayload!

  """
  Find many EventPass documents that match criteria in specified stage and unpublish from target stages
  """
  unpublishManyEventPassesConnection(
    after: ID
    before: ID
    first: Int

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]
    last: Int

    """Locales to unpublish"""
    locales: [Locale!]
    skip: Int

    """Stage to find matching documents in"""
    stage: Stage = DRAFT

    """Whether to unpublish the base document and default localization"""
    unpublishBase: Boolean = true

    """Identifies documents in draft stage"""
    where: EventPassManyWhereInput
  ): EventPassConnection!

  """Unpublish many Event documents"""
  unpublishManyEvents(
    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]

    """Locales to unpublish"""
    locales: [Locale!]

    """Whether to unpublish the base document and default localization"""
    unpublishBase: Boolean = true

    """Identifies documents in each stage"""
    where: EventManyWhereInput
  ): BatchPayload!

  """
  Find many Event documents that match criteria in specified stage and unpublish from target stages
  """
  unpublishManyEventsConnection(
    after: ID
    before: ID
    first: Int

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]
    last: Int

    """Locales to unpublish"""
    locales: [Locale!]
    skip: Int

    """Stage to find matching documents in"""
    stage: Stage = DRAFT

    """Whether to unpublish the base document and default localization"""
    unpublishBase: Boolean = true

    """Identifies documents in draft stage"""
    where: EventManyWhereInput
  ): EventConnection!

  """Unpublish many Organizer documents"""
  unpublishManyOrganizers(
    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]

    """Locales to unpublish"""
    locales: [Locale!]

    """Whether to unpublish the base document and default localization"""
    unpublishBase: Boolean = true

    """Identifies documents in each stage"""
    where: OrganizerManyWhereInput
  ): BatchPayload!

  """
  Find many Organizer documents that match criteria in specified stage and unpublish from target stages
  """
  unpublishManyOrganizersConnection(
    after: ID
    before: ID
    first: Int

    """Stages to unpublish documents from"""
    from: [Stage!]! = [PUBLISHED]
    last: Int

    """Locales to unpublish"""
    locales: [Locale!]
    skip: Int

    """Stage to find matching documents in"""
    stage: Stage = DRAFT

    """Whether to unpublish the base document and default localization"""
    unpublishBase: Boolean = true

    """Identifies documents in draft stage"""
    where: OrganizerManyWhereInput
  ): OrganizerConnection!

  """
  Unpublish one organizer from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only.
  """
  unpublishOrganizer(
    """Stages to unpublish document from"""
    from: [Stage!]! = [PUBLISHED]

    """
    Optional locales to unpublish. Unpublishing the default locale will completely remove the document from the selected stages
    """
    locales: [Locale!]

    """
    Unpublish complete document including default localization and relations from stages. Can be disabled.
    """
    unpublishBase: Boolean = true

    """Document to unpublish"""
    where: OrganizerWhereUniqueInput!
  ): Organizer

  """Update one asset"""
  updateAsset(data: AssetUpdateInput!, where: AssetWhereUniqueInput!): Asset

  """Update one event"""
  updateEvent(data: EventUpdateInput!, where: EventWhereUniqueInput!): Event

  """Update one eventPass"""
  updateEventPass(data: EventPassUpdateInput!, where: EventPassWhereUniqueInput!): EventPass

  """Update many assets"""
  updateManyAssets(
    """Updates to document content"""
    data: AssetUpdateManyInput!

    """Documents to apply update on"""
    where: AssetManyWhereInput
  ): BatchPayload!

  """Update many Asset documents"""
  updateManyAssetsConnection(
    after: ID
    before: ID

    """Updates to document content"""
    data: AssetUpdateManyInput!
    first: Int
    last: Int
    skip: Int

    """Documents to apply update on"""
    where: AssetManyWhereInput
  ): AssetConnection!

  """Update many eventPasses"""
  updateManyEventPasses(
    """Updates to document content"""
    data: EventPassUpdateManyInput!

    """Documents to apply update on"""
    where: EventPassManyWhereInput
  ): BatchPayload!

  """Update many EventPass documents"""
  updateManyEventPassesConnection(
    after: ID
    before: ID

    """Updates to document content"""
    data: EventPassUpdateManyInput!
    first: Int
    last: Int
    skip: Int

    """Documents to apply update on"""
    where: EventPassManyWhereInput
  ): EventPassConnection!

  """Update many events"""
  updateManyEvents(
    """Updates to document content"""
    data: EventUpdateManyInput!

    """Documents to apply update on"""
    where: EventManyWhereInput
  ): BatchPayload!

  """Update many Event documents"""
  updateManyEventsConnection(
    after: ID
    before: ID

    """Updates to document content"""
    data: EventUpdateManyInput!
    first: Int
    last: Int
    skip: Int

    """Documents to apply update on"""
    where: EventManyWhereInput
  ): EventConnection!

  """Update many organizers"""
  updateManyOrganizers(
    """Updates to document content"""
    data: OrganizerUpdateManyInput!

    """Documents to apply update on"""
    where: OrganizerManyWhereInput
  ): BatchPayload!

  """Update many Organizer documents"""
  updateManyOrganizersConnection(
    after: ID
    before: ID

    """Updates to document content"""
    data: OrganizerUpdateManyInput!
    first: Int
    last: Int
    skip: Int

    """Documents to apply update on"""
    where: OrganizerManyWhereInput
  ): OrganizerConnection!

  """Update one organizer"""
  updateOrganizer(data: OrganizerUpdateInput!, where: OrganizerWhereUniqueInput!): Organizer

  """Update one scheduledRelease"""
  updateScheduledRelease(data: ScheduledReleaseUpdateInput!, where: ScheduledReleaseWhereUniqueInput!): ScheduledRelease

  """
  update data of the table: "account"
  """
  update_account(
    """sets the columns of the filtered rows to the given values"""
    _set: account_set_input

    """filter the rows which have to be updated"""
    where: account_bool_exp!
  ): account_mutation_response

  """
  update single row of the table: "account"
  """
  update_account_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: account_set_input
    pk_columns: account_pk_columns_input!
  ): account

  """
  update multiples rows of table: "account"
  """
  update_account_many(
    """updates to execute, in order"""
    updates: [account_updates!]!
  ): [account_mutation_response]

  """
  update data of the table: "currency"
  """
  update_currency(
    """sets the columns of the filtered rows to the given values"""
    _set: currency_set_input

    """filter the rows which have to be updated"""
    where: currency_bool_exp!
  ): currency_mutation_response

  """
  update single row of the table: "currency"
  """
  update_currency_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: currency_set_input
    pk_columns: currency_pk_columns_input!
  ): currency

  """
  update multiples rows of table: "currency"
  """
  update_currency_many(
    """updates to execute, in order"""
    updates: [currency_updates!]!
  ): [currency_mutation_response]

  """
  update data of the table: "eventPassOrder"
  """
  update_eventPassOrder(
    """increments the numeric columns with given value of the filtered values"""
    _inc: eventPassOrder_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: eventPassOrder_set_input

    """filter the rows which have to be updated"""
    where: eventPassOrder_bool_exp!
  ): eventPassOrder_mutation_response

  """
  update data of the table: "eventPassOrderSums"
  """
  update_eventPassOrderSums(
    """increments the numeric columns with given value of the filtered values"""
    _inc: eventPassOrderSums_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: eventPassOrderSums_set_input

    """filter the rows which have to be updated"""
    where: eventPassOrderSums_bool_exp!
  ): eventPassOrderSums_mutation_response

  """
  update single row of the table: "eventPassOrderSums"
  """
  update_eventPassOrderSums_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: eventPassOrderSums_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: eventPassOrderSums_set_input
    pk_columns: eventPassOrderSums_pk_columns_input!
  ): eventPassOrderSums

  """
  update multiples rows of table: "eventPassOrderSums"
  """
  update_eventPassOrderSums_many(
    """updates to execute, in order"""
    updates: [eventPassOrderSums_updates!]!
  ): [eventPassOrderSums_mutation_response]

  """
  update single row of the table: "eventPassOrder"
  """
  update_eventPassOrder_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: eventPassOrder_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: eventPassOrder_set_input
    pk_columns: eventPassOrder_pk_columns_input!
  ): eventPassOrder

  """
  update multiples rows of table: "eventPassOrder"
  """
  update_eventPassOrder_many(
    """updates to execute, in order"""
    updates: [eventPassOrder_updates!]!
  ): [eventPassOrder_mutation_response]

  """
  update data of the table: "eventPassPricing"
  """
  update_eventPassPricing(
    """increments the numeric columns with given value of the filtered values"""
    _inc: eventPassPricing_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: eventPassPricing_set_input

    """filter the rows which have to be updated"""
    where: eventPassPricing_bool_exp!
  ): eventPassPricing_mutation_response

  """
  update single row of the table: "eventPassPricing"
  """
  update_eventPassPricing_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: eventPassPricing_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: eventPassPricing_set_input
    pk_columns: eventPassPricing_pk_columns_input!
  ): eventPassPricing

  """
  update multiples rows of table: "eventPassPricing"
  """
  update_eventPassPricing_many(
    """updates to execute, in order"""
    updates: [eventPassPricing_updates!]!
  ): [eventPassPricing_mutation_response]

  """
  update data of the table: "orderStatus"
  """
  update_orderStatus(
    """sets the columns of the filtered rows to the given values"""
    _set: orderStatus_set_input

    """filter the rows which have to be updated"""
    where: orderStatus_bool_exp!
  ): orderStatus_mutation_response

  """
  update single row of the table: "orderStatus"
  """
  update_orderStatus_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: orderStatus_set_input
    pk_columns: orderStatus_pk_columns_input!
  ): orderStatus

  """
  update multiples rows of table: "orderStatus"
  """
  update_orderStatus_many(
    """updates to execute, in order"""
    updates: [orderStatus_updates!]!
  ): [orderStatus_mutation_response]

  """Upsert one asset"""
  upsertAsset(upsert: AssetUpsertInput!, where: AssetWhereUniqueInput!): Asset

  """Upsert one event"""
  upsertEvent(upsert: EventUpsertInput!, where: EventWhereUniqueInput!): Event

  """Upsert one eventPass"""
  upsertEventPass(upsert: EventPassUpsertInput!, where: EventPassWhereUniqueInput!): EventPass

  """Upsert one organizer"""
  upsertOrganizer(upsert: OrganizerUpsertInput!, where: OrganizerWhereUniqueInput!): Organizer
}

"""
columns and relationships of "orderStatus"
"""
type orderStatus {
  value: String!
}

"""
aggregated selection of "orderStatus"
"""
type orderStatus_aggregate {
  aggregate: orderStatus_aggregate_fields
  nodes: [orderStatus!]!
}

"""
aggregate fields of "orderStatus"
"""
type orderStatus_aggregate_fields {
  count(columns: [orderStatus_select_column!], distinct: Boolean): Int!
  max: orderStatus_max_fields
  min: orderStatus_min_fields
}

"""
Boolean expression to filter rows from the table "orderStatus". All fields are combined with a logical 'AND'.
"""
input orderStatus_bool_exp {
  _and: [orderStatus_bool_exp!]
  _not: orderStatus_bool_exp
  _or: [orderStatus_bool_exp!]
  value: String_comparison_exp
}

"""
unique or primary key constraints on table "orderStatus"
"""
enum orderStatus_constraint {
  """
  unique or primary key constraint on columns "value"
  """
  orderStatus_pkey
}

enum orderStatus_enum {
  CANCELLED
  COMPLETED
  CONFIRMED
  PENDING
}

"""
Boolean expression to compare columns of type "orderStatus_enum". All fields are combined with logical 'AND'.
"""
input orderStatus_enum_comparison_exp {
  _eq: orderStatus_enum
  _in: [orderStatus_enum!]
  _is_null: Boolean
  _neq: orderStatus_enum
  _nin: [orderStatus_enum!]
}

"""
input type for inserting data into table "orderStatus"
"""
input orderStatus_insert_input {
  value: String
}

"""aggregate max on columns"""
type orderStatus_max_fields {
  value: String
}

"""aggregate min on columns"""
type orderStatus_min_fields {
  value: String
}

"""
response of any mutation on the table "orderStatus"
"""
type orderStatus_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [orderStatus!]!
}

"""
on_conflict condition type for table "orderStatus"
"""
input orderStatus_on_conflict {
  constraint: orderStatus_constraint!
  update_columns: [orderStatus_update_column!]! = []
  where: orderStatus_bool_exp
}

"""Ordering options when selecting data from "orderStatus"."""
input orderStatus_order_by {
  value: order_by
}

"""primary key columns input for table: orderStatus"""
input orderStatus_pk_columns_input {
  value: String!
}

"""
select columns of table "orderStatus"
"""
enum orderStatus_select_column {
  """column name"""
  value
}

"""
input type for updating data in table "orderStatus"
"""
input orderStatus_set_input {
  value: String
}

"""
Streaming cursor of the table "orderStatus"
"""
input orderStatus_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: orderStatus_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input orderStatus_stream_cursor_value_input {
  value: String
}

"""
update columns of table "orderStatus"
"""
enum orderStatus_update_column {
  """column name"""
  value
}

input orderStatus_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: orderStatus_set_input

  """filter the rows which have to be updated"""
  where: orderStatus_bool_exp!
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

type query_root {
  """
  fetch data from the table: "account"
  """
  account(
    """distinct select on columns"""
    distinct_on: [account_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [account_order_by!]

    """filter the rows returned"""
    where: account_bool_exp
  ): [account!]!

  """
  fetch aggregated fields from the table: "account"
  """
  account_aggregate(
    """distinct select on columns"""
    distinct_on: [account_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [account_order_by!]

    """filter the rows returned"""
    where: account_bool_exp
  ): account_aggregate!

  """fetch data from the table: "account" using primary key columns"""
  account_by_pk(id: uuid!): account

  """Retrieve a single asset"""
  asset(
    """
    Defines which locales should be returned.
    
    Note that `Asset` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
    stage: Stage! = PUBLISHED
    where: AssetWhereUniqueInput!
  ): Asset

  """Retrieve document version"""
  assetVersion(where: VersionWhereInput!): DocumentVersion

  """Retrieve multiple assets"""
  assets(
    after: String
    before: String
    first: Int
    last: Int

    """
    Defines which locales should be returned.
    
    Note that `Asset` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
    orderBy: AssetOrderByInput
    skip: Int
    stage: Stage! = PUBLISHED
    where: AssetWhereInput
  ): [Asset!]!

  """Retrieve multiple assets using the Relay connection interface"""
  assetsConnection(
    after: String
    before: String
    first: Int
    last: Int

    """
    Defines which locales should be returned.
    
    Note that `Asset` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
    orderBy: AssetOrderByInput
    skip: Int
    stage: Stage! = PUBLISHED
    where: AssetWhereInput
  ): AssetConnection!

  """
  fetch data from the table: "currency"
  """
  currency(
    """distinct select on columns"""
    distinct_on: [currency_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [currency_order_by!]

    """filter the rows returned"""
    where: currency_bool_exp
  ): [currency!]!

  """
  fetch aggregated fields from the table: "currency"
  """
  currency_aggregate(
    """distinct select on columns"""
    distinct_on: [currency_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [currency_order_by!]

    """filter the rows returned"""
    where: currency_bool_exp
  ): currency_aggregate!

  """fetch data from the table: "currency" using primary key columns"""
  currency_by_pk(value: String!): currency

  """Retrieve a single event"""
  event(
    """
    Defines which locales should be returned.
    
    Note that `Event` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
    stage: Stage! = PUBLISHED
    where: EventWhereUniqueInput!
  ): Event

  """Retrieve a single eventPass"""
  eventPass(
    """
    Defines which locales should be returned.
    
    Note that `EventPass` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
    stage: Stage! = PUBLISHED
    where: EventPassWhereUniqueInput!
  ): EventPass

  """
  fetch data from the table: "eventPassOrder"
  """
  eventPassOrder(
    """distinct select on columns"""
    distinct_on: [eventPassOrder_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [eventPassOrder_order_by!]

    """filter the rows returned"""
    where: eventPassOrder_bool_exp
  ): [eventPassOrder!]!

  """
  fetch data from the table: "eventPassOrderSums"
  """
  eventPassOrderSums(
    """distinct select on columns"""
    distinct_on: [eventPassOrderSums_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [eventPassOrderSums_order_by!]

    """filter the rows returned"""
    where: eventPassOrderSums_bool_exp
  ): [eventPassOrderSums!]!

  """
  fetch aggregated fields from the table: "eventPassOrderSums"
  """
  eventPassOrderSums_aggregate(
    """distinct select on columns"""
    distinct_on: [eventPassOrderSums_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [eventPassOrderSums_order_by!]

    """filter the rows returned"""
    where: eventPassOrderSums_bool_exp
  ): eventPassOrderSums_aggregate!

  """
  fetch data from the table: "eventPassOrderSums" using primary key columns
  """
  eventPassOrderSums_by_pk(eventPassId: String!): eventPassOrderSums

  """
  fetch aggregated fields from the table: "eventPassOrder"
  """
  eventPassOrder_aggregate(
    """distinct select on columns"""
    distinct_on: [eventPassOrder_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [eventPassOrder_order_by!]

    """filter the rows returned"""
    where: eventPassOrder_bool_exp
  ): eventPassOrder_aggregate!

  """fetch data from the table: "eventPassOrder" using primary key columns"""
  eventPassOrder_by_pk(id: uuid!): eventPassOrder

  """
  fetch data from the table: "eventPassPricing"
  """
  eventPassPricing(
    """distinct select on columns"""
    distinct_on: [eventPassPricing_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [eventPassPricing_order_by!]

    """filter the rows returned"""
    where: eventPassPricing_bool_exp
  ): [eventPassPricing!]!

  """
  fetch aggregated fields from the table: "eventPassPricing"
  """
  eventPassPricing_aggregate(
    """distinct select on columns"""
    distinct_on: [eventPassPricing_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [eventPassPricing_order_by!]

    """filter the rows returned"""
    where: eventPassPricing_bool_exp
  ): eventPassPricing_aggregate!

  """
  fetch data from the table: "eventPassPricing" using primary key columns
  """
  eventPassPricing_by_pk(id: uuid!): eventPassPricing

  """Retrieve document version"""
  eventPassVersion(where: VersionWhereInput!): DocumentVersion

  """Retrieve multiple eventPasses"""
  eventPasses(
    after: String
    before: String
    first: Int
    last: Int

    """
    Defines which locales should be returned.
    
    Note that `EventPass` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
    orderBy: EventPassOrderByInput
    skip: Int
    stage: Stage! = PUBLISHED
    where: EventPassWhereInput
  ): [EventPass!]!

  """Retrieve multiple eventPasses using the Relay connection interface"""
  eventPassesConnection(
    after: String
    before: String
    first: Int
    last: Int

    """
    Defines which locales should be returned.
    
    Note that `EventPass` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
    orderBy: EventPassOrderByInput
    skip: Int
    stage: Stage! = PUBLISHED
    where: EventPassWhereInput
  ): EventPassConnection!

  """Retrieve document version"""
  eventVersion(where: VersionWhereInput!): DocumentVersion

  """Retrieve multiple events"""
  events(
    after: String
    before: String
    first: Int
    last: Int

    """
    Defines which locales should be returned.
    
    Note that `Event` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
    orderBy: EventOrderByInput
    skip: Int
    stage: Stage! = PUBLISHED
    where: EventWhereInput
  ): [Event!]!

  """Retrieve multiple events using the Relay connection interface"""
  eventsConnection(
    after: String
    before: String
    first: Int
    last: Int

    """
    Defines which locales should be returned.
    
    Note that `Event` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
    orderBy: EventOrderByInput
    skip: Int
    stage: Stage! = PUBLISHED
    where: EventWhereInput
  ): EventConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!

    """
    Defines which locales should be returned.
    
    Note that `Node` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
    stage: Stage! = PUBLISHED
  ): Node

  """
  fetch data from the table: "orderStatus"
  """
  orderStatus(
    """distinct select on columns"""
    distinct_on: [orderStatus_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [orderStatus_order_by!]

    """filter the rows returned"""
    where: orderStatus_bool_exp
  ): [orderStatus!]!

  """
  fetch aggregated fields from the table: "orderStatus"
  """
  orderStatus_aggregate(
    """distinct select on columns"""
    distinct_on: [orderStatus_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [orderStatus_order_by!]

    """filter the rows returned"""
    where: orderStatus_bool_exp
  ): orderStatus_aggregate!

  """fetch data from the table: "orderStatus" using primary key columns"""
  orderStatus_by_pk(value: String!): orderStatus

  """Retrieve a single organizer"""
  organizer(
    """
    Defines which locales should be returned.
    
    Note that `Organizer` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
    stage: Stage! = PUBLISHED
    where: OrganizerWhereUniqueInput!
  ): Organizer

  """Retrieve document version"""
  organizerVersion(where: VersionWhereInput!): DocumentVersion

  """Retrieve multiple organizers"""
  organizers(
    after: String
    before: String
    first: Int
    last: Int

    """
    Defines which locales should be returned.
    
    Note that `Organizer` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
    orderBy: OrganizerOrderByInput
    skip: Int
    stage: Stage! = PUBLISHED
    where: OrganizerWhereInput
  ): [Organizer!]!

  """Retrieve multiple organizers using the Relay connection interface"""
  organizersConnection(
    after: String
    before: String
    first: Int
    last: Int

    """
    Defines which locales should be returned.
    
    Note that `Organizer` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
    The first locale matching the provided list will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
    orderBy: OrganizerOrderByInput
    skip: Int
    stage: Stage! = PUBLISHED
    where: OrganizerWhereInput
  ): OrganizerConnection!

  """Retrieve a single scheduledOperation"""
  scheduledOperation(
    """
    Defines which locales should be returned.
    
    Note that `ScheduledOperation` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
    stage: Stage! = PUBLISHED
    where: ScheduledOperationWhereUniqueInput!
  ): ScheduledOperation

  """Retrieve multiple scheduledOperations"""
  scheduledOperations(
    after: String
    before: String
    first: Int
    last: Int

    """
    Defines which locales should be returned.
    
    Note that `ScheduledOperation` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
    orderBy: ScheduledOperationOrderByInput
    skip: Int
    stage: Stage! = PUBLISHED
    where: ScheduledOperationWhereInput
  ): [ScheduledOperation!]!

  """
  Retrieve multiple scheduledOperations using the Relay connection interface
  """
  scheduledOperationsConnection(
    after: String
    before: String
    first: Int
    last: Int

    """
    Defines which locales should be returned.
    
    Note that `ScheduledOperation` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
    orderBy: ScheduledOperationOrderByInput
    skip: Int
    stage: Stage! = PUBLISHED
    where: ScheduledOperationWhereInput
  ): ScheduledOperationConnection!

  """Retrieve a single scheduledRelease"""
  scheduledRelease(
    """
    Defines which locales should be returned.
    
    Note that `ScheduledRelease` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
    stage: Stage! = PUBLISHED
    where: ScheduledReleaseWhereUniqueInput!
  ): ScheduledRelease

  """Retrieve multiple scheduledReleases"""
  scheduledReleases(
    after: String
    before: String
    first: Int
    last: Int

    """
    Defines which locales should be returned.
    
    Note that `ScheduledRelease` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
    orderBy: ScheduledReleaseOrderByInput
    skip: Int
    stage: Stage! = PUBLISHED
    where: ScheduledReleaseWhereInput
  ): [ScheduledRelease!]!

  """
  Retrieve multiple scheduledReleases using the Relay connection interface
  """
  scheduledReleasesConnection(
    after: String
    before: String
    first: Int
    last: Int

    """
    Defines which locales should be returned.
    
    Note that `ScheduledRelease` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
    orderBy: ScheduledReleaseOrderByInput
    skip: Int
    stage: Stage! = PUBLISHED
    where: ScheduledReleaseWhereInput
  ): ScheduledReleaseConnection!

  """Retrieve a single user"""
  user(
    """
    Defines which locales should be returned.
    
    Note that `User` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
    stage: Stage! = PUBLISHED
    where: UserWhereUniqueInput!
  ): User

  """Retrieve multiple users"""
  users(
    after: String
    before: String
    first: Int
    last: Int

    """
    Defines which locales should be returned.
    
    Note that `User` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
    orderBy: UserOrderByInput
    skip: Int
    stage: Stage! = PUBLISHED
    where: UserWhereInput
  ): [User!]!

  """Retrieve multiple users using the Relay connection interface"""
  usersConnection(
    after: String
    before: String
    first: Int
    last: Int

    """
    Defines which locales should be returned.
    
    Note that `User` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
    For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.
    
    This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
    """
    locales: [Locale!]! = [en]
    orderBy: UserOrderByInput
    skip: Int
    stage: Stage! = PUBLISHED
    where: UserWhereInput
  ): UserConnection!
}

type subscription_root {
  """
  fetch data from the table: "account"
  """
  account(
    """distinct select on columns"""
    distinct_on: [account_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [account_order_by!]

    """filter the rows returned"""
    where: account_bool_exp
  ): [account!]!

  """
  fetch aggregated fields from the table: "account"
  """
  account_aggregate(
    """distinct select on columns"""
    distinct_on: [account_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [account_order_by!]

    """filter the rows returned"""
    where: account_bool_exp
  ): account_aggregate!

  """fetch data from the table: "account" using primary key columns"""
  account_by_pk(id: uuid!): account

  """
  fetch data from the table in a streaming manner: "account"
  """
  account_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [account_stream_cursor_input]!

    """filter the rows returned"""
    where: account_bool_exp
  ): [account!]!

  """
  fetch data from the table: "currency"
  """
  currency(
    """distinct select on columns"""
    distinct_on: [currency_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [currency_order_by!]

    """filter the rows returned"""
    where: currency_bool_exp
  ): [currency!]!

  """
  fetch aggregated fields from the table: "currency"
  """
  currency_aggregate(
    """distinct select on columns"""
    distinct_on: [currency_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [currency_order_by!]

    """filter the rows returned"""
    where: currency_bool_exp
  ): currency_aggregate!

  """fetch data from the table: "currency" using primary key columns"""
  currency_by_pk(value: String!): currency

  """
  fetch data from the table in a streaming manner: "currency"
  """
  currency_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [currency_stream_cursor_input]!

    """filter the rows returned"""
    where: currency_bool_exp
  ): [currency!]!

  """
  fetch data from the table: "eventPassOrder"
  """
  eventPassOrder(
    """distinct select on columns"""
    distinct_on: [eventPassOrder_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [eventPassOrder_order_by!]

    """filter the rows returned"""
    where: eventPassOrder_bool_exp
  ): [eventPassOrder!]!

  """
  fetch data from the table: "eventPassOrderSums"
  """
  eventPassOrderSums(
    """distinct select on columns"""
    distinct_on: [eventPassOrderSums_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [eventPassOrderSums_order_by!]

    """filter the rows returned"""
    where: eventPassOrderSums_bool_exp
  ): [eventPassOrderSums!]!

  """
  fetch aggregated fields from the table: "eventPassOrderSums"
  """
  eventPassOrderSums_aggregate(
    """distinct select on columns"""
    distinct_on: [eventPassOrderSums_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [eventPassOrderSums_order_by!]

    """filter the rows returned"""
    where: eventPassOrderSums_bool_exp
  ): eventPassOrderSums_aggregate!

  """
  fetch data from the table: "eventPassOrderSums" using primary key columns
  """
  eventPassOrderSums_by_pk(eventPassId: String!): eventPassOrderSums

  """
  fetch data from the table in a streaming manner: "eventPassOrderSums"
  """
  eventPassOrderSums_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [eventPassOrderSums_stream_cursor_input]!

    """filter the rows returned"""
    where: eventPassOrderSums_bool_exp
  ): [eventPassOrderSums!]!

  """
  fetch aggregated fields from the table: "eventPassOrder"
  """
  eventPassOrder_aggregate(
    """distinct select on columns"""
    distinct_on: [eventPassOrder_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [eventPassOrder_order_by!]

    """filter the rows returned"""
    where: eventPassOrder_bool_exp
  ): eventPassOrder_aggregate!

  """fetch data from the table: "eventPassOrder" using primary key columns"""
  eventPassOrder_by_pk(id: uuid!): eventPassOrder

  """
  fetch data from the table in a streaming manner: "eventPassOrder"
  """
  eventPassOrder_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [eventPassOrder_stream_cursor_input]!

    """filter the rows returned"""
    where: eventPassOrder_bool_exp
  ): [eventPassOrder!]!

  """
  fetch data from the table: "eventPassPricing"
  """
  eventPassPricing(
    """distinct select on columns"""
    distinct_on: [eventPassPricing_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [eventPassPricing_order_by!]

    """filter the rows returned"""
    where: eventPassPricing_bool_exp
  ): [eventPassPricing!]!

  """
  fetch aggregated fields from the table: "eventPassPricing"
  """
  eventPassPricing_aggregate(
    """distinct select on columns"""
    distinct_on: [eventPassPricing_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [eventPassPricing_order_by!]

    """filter the rows returned"""
    where: eventPassPricing_bool_exp
  ): eventPassPricing_aggregate!

  """
  fetch data from the table: "eventPassPricing" using primary key columns
  """
  eventPassPricing_by_pk(id: uuid!): eventPassPricing

  """
  fetch data from the table in a streaming manner: "eventPassPricing"
  """
  eventPassPricing_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [eventPassPricing_stream_cursor_input]!

    """filter the rows returned"""
    where: eventPassPricing_bool_exp
  ): [eventPassPricing!]!

  """
  fetch data from the table: "orderStatus"
  """
  orderStatus(
    """distinct select on columns"""
    distinct_on: [orderStatus_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [orderStatus_order_by!]

    """filter the rows returned"""
    where: orderStatus_bool_exp
  ): [orderStatus!]!

  """
  fetch aggregated fields from the table: "orderStatus"
  """
  orderStatus_aggregate(
    """distinct select on columns"""
    distinct_on: [orderStatus_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [orderStatus_order_by!]

    """filter the rows returned"""
    where: orderStatus_bool_exp
  ): orderStatus_aggregate!

  """fetch data from the table: "orderStatus" using primary key columns"""
  orderStatus_by_pk(value: String!): orderStatus

  """
  fetch data from the table in a streaming manner: "orderStatus"
  """
  orderStatus_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [orderStatus_stream_cursor_input]!

    """filter the rows returned"""
    where: orderStatus_bool_exp
  ): [orderStatus!]!
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

scalar uuid

"""
Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'.
"""
input uuid_comparison_exp {
  _eq: uuid
  _gt: uuid
  _gte: uuid
  _in: [uuid!]
  _is_null: Boolean
  _lt: uuid
  _lte: uuid
  _neq: uuid
  _nin: [uuid!]
}