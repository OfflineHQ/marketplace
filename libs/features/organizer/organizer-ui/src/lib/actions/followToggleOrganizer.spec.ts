// Generated by CodiumAI

import { adminSdk } from '@gql/admin/api';
import { userSdk } from '@gql/user/api';
import { getCurrentUser } from '@next/next-auth/user';
import { accounts } from '@test-utils/gql';
import { followToggleOrganizer } from './followToggleOrganizer';

jest.mock('@gql/admin/api');
jest.mock('@gql/user/api');

jest.mock('@next/next-auth/user', () => ({
  getCurrentUser: jest.fn(),
}));

const user = accounts.alpha_user;

describe('followToggleOrganizer', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });
  beforeAll(() => {
    (getCurrentUser as jest.Mock).mockResolvedValue(user);
  });
  // The function should toggle the follow status of an organizer for a user when called with a valid organizer slug.
  it('should toggle the follow status of an organizer for a user when called with a valid organizer slug', async () => {
    const checkFollowingOrganizerMock = jest.spyOn(
      adminSdk,
      'CheckFollowingOrganizer',
    );
    checkFollowingOrganizerMock.mockResolvedValue({ follow_by_pk: null });

    const insertFollowOrganizerMock = jest.spyOn(
      userSdk,
      'InsertFollowOrganizer',
    );
    insertFollowOrganizerMock.mockResolvedValue({});

    const result = await followToggleOrganizer('organizer-slug');

    expect(getCurrentUser).toHaveBeenCalled();
    expect(checkFollowingOrganizerMock).toHaveBeenCalledWith({
      accountId: user.id,
      organizerSlug: 'organizer-slug',
    });
    expect(insertFollowOrganizerMock).toHaveBeenCalledWith({
      organizerSlug: 'organizer-slug',
    });
    expect(result).toBe(true);
  });

  // If the user is not following the organizer, the function should follow the organizer and return true.
  it('should follow the organizer and return true if the user is not following the organizer', async () => {
    const checkFollowingOrganizerMock = jest.spyOn(
      adminSdk,
      'CheckFollowingOrganizer',
    );
    checkFollowingOrganizerMock.mockResolvedValue({ follow_by_pk: null });

    const insertFollowOrganizerMock = jest.spyOn(
      userSdk,
      'InsertFollowOrganizer',
    );
    insertFollowOrganizerMock.mockResolvedValue({});

    const result = await followToggleOrganizer('organizer-slug');

    expect(getCurrentUser).toHaveBeenCalled();
    expect(checkFollowingOrganizerMock).toHaveBeenCalledWith({
      accountId: user.id,
      organizerSlug: 'organizer-slug',
    });
    expect(insertFollowOrganizerMock).toHaveBeenCalledWith({
      organizerSlug: 'organizer-slug',
    });
    expect(result).toBe(true);
  });

  // If the user is already following the organizer, the function should unfollow the organizer and return false.
  it('should unfollow the organizer and return false if the user is already following the organizer', async () => {
    const checkFollowingOrganizerMock = jest.spyOn(
      adminSdk,
      'CheckFollowingOrganizer',
    );
    checkFollowingOrganizerMock.mockResolvedValue({
      follow_by_pk: { accountId: 'user-id', organizerSlug: 'organizer-slug' },
    });

    const deleteFollowOrganizerMock = jest.spyOn(
      adminSdk,
      'DeleteFollowOrganizer',
    );
    deleteFollowOrganizerMock.mockResolvedValue({});

    const result = await followToggleOrganizer('organizer-slug');

    expect(getCurrentUser).toHaveBeenCalled();
    expect(checkFollowingOrganizerMock).toHaveBeenCalledWith({
      accountId: user.id,
      organizerSlug: 'organizer-slug',
    });
    expect(deleteFollowOrganizerMock).toHaveBeenCalledWith({
      accountId: user.id,
      organizerSlug: 'organizer-slug',
    });
    expect(result).toBe(false);
  });

  // If the user is not authenticated, the function should throw an error with the message 'User not found'.
  it("should throw an error with the message 'User not found' if the user is not authenticated", async () => {
    (getCurrentUser as jest.Mock).mockRejectedValueOnce(
      new Error('User not found'),
    );
    await expect(followToggleOrganizer('organizer-slug')).rejects.toThrow(
      'User not found',
    );
  });

  // If the organizer slug is not provided or is invalid, the function should throw an error.
  it('should throw an error if the organizer slug is not provided or is invalid', async () => {
    await expect(followToggleOrganizer('')).rejects.toThrow(
      'Organizer slug is empty',
    );
  });

  // If the adminSdk or userSdk fails to perform the follow toggle operation, the function should throw an error.
  it('should throw an error if the adminSdk or userSdk fails to perform the follow toggle operation', async () => {
    const checkFollowingOrganizerMock = jest.spyOn(
      adminSdk,
      'CheckFollowingOrganizer',
    );
    checkFollowingOrganizerMock.mockRejectedValue(
      new Error('Failed to check following organizer'),
    );

    await expect(followToggleOrganizer('organizer-slug')).rejects.toThrow(
      'Failed to check following organizer',
    );
  });
});
