// Generated by CodiumAI

import { FeatureFlagsEnum } from '@insight/types';
import { PostHog as PosthogNode } from 'posthog-node';
import { Posthog } from './insight-server';

jest.mock('posthog-node');

describe('Posthog', () => {
  const allFlags = {
    [FeatureFlagsEnum.KYC]: true,
  };
  const postHogClientMock = {
    getAllFlags: jest.fn().mockResolvedValue(allFlags),
    shutdown: jest.fn(),
    reloadFeatureFlags: jest.fn(),
    getFeatureFlag: jest.fn().mockResolvedValue(true),
    getFeatureFlagPayload: jest.fn().mockResolvedValue({}),
  };
  process.env.POSTHOG_KEY = 'testKey';
  beforeEach(() => {
    jest.clearAllMocks();
    (PosthogNode as jest.Mock).mockImplementation(() => postHogClientMock);
  });

  it('should return the same instance when called multiple times', () => {
    const instance1 = Posthog.getInstance();
    const instance2 = Posthog.getInstance();
    expect(instance1).toBe(instance2);
  });

  it('should update flags correctly when given valid userDistinctId', async () => {
    const userDistinctId = 'validId';

    const featureFlags = Posthog.getInstance();
    const flags = await featureFlags.getAllFlags(userDistinctId);

    expect(postHogClientMock.getAllFlags).toHaveBeenCalledWith(userDistinctId, {
      personProperties: {
        address: userDistinctId,
      },
    });
    expect(flags[FeatureFlagsEnum.KYC]).toBe(true);
  });

  it('should handle getFeatureFlag correctly', async () => {
    const userDistinctId = 'validId';
    const featureFlags = Posthog.getInstance();
    const flag = await featureFlags.getFeatureFlag(
      FeatureFlagsEnum.KYC,
      userDistinctId,
    );

    expect(postHogClientMock.getFeatureFlag).toHaveBeenCalledWith(
      FeatureFlagsEnum.KYC,
      userDistinctId,
      {
        personProperties: {
          address: userDistinctId,
        },
      },
    );
    expect(flag).toBe(true);
  });

  it('should handle getFeatureFlagPayload correctly', async () => {
    const userDistinctId = 'validId';
    const featureFlags = Posthog.getInstance();
    const payload = await featureFlags.getFeatureFlagPayload(
      FeatureFlagsEnum.KYC,
      userDistinctId,
    );

    expect(postHogClientMock.getFeatureFlagPayload).toHaveBeenCalledWith(
      FeatureFlagsEnum.KYC,
      userDistinctId,
    );
    expect(payload).toEqual({});
  });
});
